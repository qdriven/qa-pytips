import{_ as k,a as m,b as h}from"./BaseWarningTitle.f5a386c9.js";import{_ as f,a as y,b as _}from"./BaseDisclaimerTitle.631caf82.js";import{q as b,o as w,c as x,b as t,f as s,e as a,t as c,B as P,s as n}from"./app.e6b4b7b5.js";const q={class:"markdown-body"},F=a("a",{href:"https://docs.python.org/3/library/stdtypes.html?highlight=sprintf#printf-style-string-formatting"},"Python 3 documentation",-1),v=a("b",null,"% operator",-1),I=a("a",{href:"#formatted-string-literals-or-f-strings"},"formatted string literals",-1),S=a("h2",{id:"operator",tabindex:"-1"},"% operator",-1),H=a("a",{href:"#strformat"},"str.format",-1),T=a("a",{href:"#formatted-string-literals-or-f-strings"},"formatted string literals",-1),R=a("code",null,"%",-1),E=c(`<pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">&#39;Pete&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;Hello %s&#39;</span> <span class="token operator">%</span> name
<span class="token comment"># &quot;Hello Pete&quot;</span>
</code></pre><p>We can use the <code>%d</code> format specifier to convert an int value to a string:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> num <span class="token operator">=</span> <span class="token number">5</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;I have %d apples&#39;</span> <span class="token operator">%</span> num
<span class="token comment"># &quot;I have 5 apples&quot;</span>
</code></pre><h2 id="strformat" tabindex="-1">str.format</h2><p>Python 3 introduced a new way to do string formatting that was later back-ported to Python 2.7. This makes the syntax for string formatting more regular.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token number">20</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&quot;Hello I&#39;m {}, my age is {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
<span class="token comment"># &quot;Hello I&#39;m John, my age is 20&quot;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&quot;Hello I&#39;m {0}, my age is {1}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
<span class="token comment"># &quot;Hello I&#39;m John, my age is 20&quot;</span>
</code></pre><h2 id="formatted-string-literals-or-f-strings" tabindex="-1">Formatted String Literals or f-Strings</h2><p>If your are using Python 3.6+, string <code>f-Strings</code> are the recommended way to format strings.</p>`,8),C=a("a",{href:"https://docs.python.org/3/reference/lexical_analysis.html#f-strings"},"Python 3 documentation",-1),N=c(`<pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">&#39;Elizabeth&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f&#39;Hello </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!&#39;</span></span>
<span class="token comment"># &#39;Hello Elizabeth!&#39;</span>
</code></pre><p>It is even possible to do inline arithmetic with it:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">5</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token number">10</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f&#39;Five plus ten is </span><span class="token interpolation"><span class="token punctuation">{</span>a <span class="token operator">+</span> b<span class="token punctuation">}</span></span><span class="token string"> and not </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span>
<span class="token comment"># &#39;Five plus ten is 15 and not 30.&#39;</span>
</code></pre><h3 id="multiline-f-strings" tabindex="-1">Multiline f-Strings</h3><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">&#39;Robert&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> messages <span class="token operator">=</span> <span class="token number">12</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token string-interpolation"><span class="token string">f&#39;Hi, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">. &#39;</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token string-interpolation"><span class="token string">f&#39;You have </span><span class="token interpolation"><span class="token punctuation">{</span>messages<span class="token punctuation">}</span></span><span class="token string"> unread messages&#39;</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>
<span class="token comment"># &#39;Hi, Robert. You have 12 unread messages&#39;</span>
</code></pre><h3 id="the-specifier" tabindex="-1">The <code>=</code> specifier</h3><p>This will print the expression and its value:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&quot;%b/%d/%Y - %H:%M:%S&quot;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f&#39;date and time: </span><span class="token interpolation"><span class="token punctuation">{</span>now<span class="token operator">=</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>
<span class="token comment"># &quot;date and time: now=&#39;Nov/14/2022 - 20:50:01&#39;&quot;</span>
</code></pre><h3 id="adding-spaces-or-characters" tabindex="-1">Adding spaces or characters</h3><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token format-spec">-^20</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
<span class="token comment"># &#39;name.upper() = -------ROBERT-------&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token format-spec">^20</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
<span class="token comment"># &#39;name.upper() =        ROBERT       &#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token format-spec">20</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
<span class="token comment"># &#39;name.upper() = ROBERT              &#39;</span>
</code></pre><h2 id="formatting-digits" tabindex="-1">Formatting Digits</h2><p>Adding thousands separator</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">10000000</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token format-spec">,</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
<span class="token comment"># &#39;10,000,000&#39;</span>
</code></pre><p>Rounding</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">3.1415926</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
<span class="token comment"># &#39;3.14&#39;</span>
</code></pre><p>Showing as Percentage</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">0.816562</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token format-spec">.2%</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
<span class="token comment"># &#39;81.66%&#39;</span>
</code></pre><h3 id="number-formatting-table" tabindex="-1">Number formatting table</h3><table><thead><tr><th>Number</th><th>Format</th><th>Output</th><th>description</th></tr></thead><tbody><tr><td>3.1415926</td><td>{:.2f}</td><td>3.14</td><td>Format float 2 decimal places</td></tr><tr><td>3.1415926</td><td>{:+.2f}</td><td>+3.14</td><td>Format float 2 decimal places with sign</td></tr><tr><td>-1</td><td>{:+.2f}</td><td>-1.00</td><td>Format float 2 decimal places with sign</td></tr><tr><td>2.71828</td><td>{:.0f}</td><td>3</td><td>Format float with no decimal places</td></tr><tr><td>4</td><td>{:0&gt;2d}</td><td>04</td><td>Pad number with zeros (left padding, width 2)</td></tr><tr><td>4</td><td>{:x&lt;4d}</td><td>4xxx</td><td>Pad number with x\u2019s (right padding, width 4)</td></tr><tr><td>10</td><td>{:x&lt;4d}</td><td>10xx</td><td>Pad number with x\u2019s (right padding, width 4)</td></tr><tr><td>1000000</td><td>{:,}</td><td>1,000,000</td><td>Number format with comma separator</td></tr><tr><td>0.35</td><td>{:.2%}</td><td>35.00%</td><td>Format percentage</td></tr><tr><td>1000000000</td><td>{:.2e}</td><td>1.00e+09</td><td>Exponent notation</td></tr><tr><td>11</td><td>{:11d}</td><td>11</td><td>Right-aligned (default, width 10)</td></tr><tr><td>11</td><td>{:&lt;11d}</td><td>11</td><td>Left-aligned (width 10)</td></tr><tr><td>11</td><td>{:^11d}</td><td>11</td><td>Center aligned (width 10)</td></tr></tbody></table><h2 id="template-strings" tabindex="-1">Template Strings</h2><p>A simpler and less powerful mechanism, but it is recommended when handling strings generated by users. Due to their reduced complexity, template strings are a safer choice.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> string <span class="token keyword">import</span> Template
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">&#39;Elizabeth&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t <span class="token operator">=</span> Template<span class="token punctuation">(</span><span class="token string">&#39;Hey $name!&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>substitute<span class="token punctuation">(</span>name<span class="token operator">=</span>name<span class="token punctuation">)</span>
<span class="token comment"># &#39;Hey Elizabeth!&#39;</span>
</code></pre>`,22),Y="Python String Formatting - Python Cheatsheet",D="If your are using Python 3.6+, string f-strings are the recommended way to format strings.",M=[{property:"og:title",content:"Python String Formatting - Python Cheatsheet"},{property:"og:description",content:"If your are using Python 3.6+, string f-strings are the recommended way to format strings."},{name:"description",content:"If your are using Python 3.6+, string f-strings are the recommended way to format strings."}],W={__name:"30-string-formatting",setup(B,{expose:l}){const o={title:"Python String Formatting - Python Cheatsheet",description:"If your are using Python 3.6+, string f-strings are the recommended way to format strings.",meta:[{property:"og:title",content:"Python String Formatting - Python Cheatsheet"},{property:"og:description",content:"If your are using Python 3.6+, string f-strings are the recommended way to format strings."},{name:"description",content:"If your are using Python 3.6+, string f-strings are the recommended way to format strings."}]};return l({frontmatter:o}),b({title:"Python String Formatting - Python Cheatsheet",meta:[{property:"og:title",content:"Python String Formatting - Python Cheatsheet"},{property:"og:description",content:"If your are using Python 3.6+, string f-strings are the recommended way to format strings."},{name:"description",content:"If your are using Python 3.6+, string f-strings are the recommended way to format strings."}]}),(A,O)=>{const i=P,e=y,p=_,r=f,g=m,d=h,u=k;return w(),x("div",q,[t(i,{title:o.title,description:o.description},{default:s(()=>[n(" Python String Formatting ")]),_:1},8,["title","description"]),t(r,null,{default:s(()=>[t(e,null,{default:s(()=>[n(" From the "),F]),_:1}),t(p,null,{default:s(()=>[n(" The formatting operations described here ("),v,n(") exhibit a variety of quirks that lead to a number of common errors [...]. Using the newer "),I,n(" [...] helps avoid these errors. These alternatives also provide more powerful, flexible and extensible approaches to formatting text. ")]),_:1})]),_:1}),S,t(u,null,{default:s(()=>[t(g,null,{default:s(()=>[n(" Prefer String Literals ")]),_:1}),t(d,null,{default:s(()=>[n(" For new code, using "),H,n(", or "),T,n(" (Python 3.6+) over the "),R,n(" operator is strongly recommended. ")]),_:1})]),_:1}),E,t(r,null,{default:s(()=>[t(e,null,{default:s(()=>[n(" From the "),C]),_:1}),t(p,null,{default:s(()=>[n(" A formatted string literal or f-string is a string literal that is prefixed with `f` or `F`. These strings may contain replacement fields, which are expressions delimited by curly braces {}. While other string literals always have a constant value, formatted strings are really expressions evaluated at run time. ")]),_:1})]),_:1}),N])}}};export{W as default,D as description,M as meta,Y as title};
