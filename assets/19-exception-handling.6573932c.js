import{_ as l,a as u,b as r}from"./BaseDisclaimerTitle.631caf82.js";import{q as k,o as d,c as g,b as n,f as s,t as h,B as m,s as t,e as y}from"./app.e6b4b7b5.js";const x={class:"markdown-body"},_=y("a",{target:"_blank",href:"https://en.wikipedia.org/wiki/Exception_handling"},"Exception handling",-1),f=h(`<p>Python has many <a href="https://docs.python.org/3/library/exceptions.html" target="_blank" rel="noopener">built-in exceptions</a> that are raised when a program encounters an error, and most external libraries, like the popular <a href="https://requests.readthedocs.io/en/latest" target="_blank" rel="noopener">Requests</a>, include his own <a href="https://requests.readthedocs.io/en/latest/user/quickstart/#errors-and-exceptions" target="_blank" rel="noopener">custom exceptions</a> that we will need to deal to.</p><h2 id="basic-exception-handling" tabindex="-1">Basic exception handling</h2><p>You can\u2019t divide by zero, that is a mathematical true, and if you try to do it in Python, the interpreter will raise the built-in exception <a href="https://docs.python.org/3/library/exceptions.html#ZeroDivisionError" target="_blank" rel="noopener">ZeroDivisionError</a>:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>dividend <span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>dividend <span class="token operator">/</span> divisor<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> divide<span class="token punctuation">(</span>dividend<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> divisor<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token comment"># 5</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> divide<span class="token punctuation">(</span>dividend<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> divisor<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment"># Traceback (most recent call last):</span>
<span class="token comment">#   File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span>
<span class="token comment"># ZeroDivisionError: division by zero</span>
</code></pre><p>Let\u2019s say we don\u2019t want our program to stop its execution or show the user an output he will not understand. Say we want to print a useful and clear message, then we need to <strong><em>handle</em></strong> the exception with the <code>try</code> and <code>except</code> keywords:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>dividend <span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">try</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>dividend <span class="token operator">/</span> divisor<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;You can not divide by 0&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> divide<span class="token punctuation">(</span>dividend<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> divisor<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token comment"># 5</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> divide<span class="token punctuation">(</span>dividend<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> divisor<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment"># You can not divide by 0</span>
</code></pre><h2 id="final-code-in-exception-handling" tabindex="-1">Final code in exception handling</h2><p>The code inside the <code>finally</code> section is always executed, no matter if an exception has been raised or not:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>dividend <span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">try</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>dividend <span class="token operator">/</span> divisor<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;You can not divide by 0&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">finally</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Execution finished&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> divide<span class="token punctuation">(</span>dividend<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> divisor<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token comment"># 5</span>
<span class="token comment"># Execution finished</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> divide<span class="token punctuation">(</span>dividend<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> divisor<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment"># You can not divide by 0</span>
<span class="token comment"># Execution finished</span>
</code></pre><h2 id="custom-exceptions" tabindex="-1">Custom Exceptions</h2><p>Custom exceptions initialize by creating a <code>class</code> that inherits from the base <code>Exception</code> class of Python, and are raised using the <code>raise</code> keyword:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">raise</span> MyCustomException
<span class="token comment"># Traceback (most recent call last):</span>
<span class="token comment">#   File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span>
<span class="token comment"># __main__.MyCustomException</span>
</code></pre><p>To declare a custom exception message, you can pass it as a parameter:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">raise</span> MyCustomException<span class="token punctuation">(</span><span class="token string">&#39;A custom message for my custom exception&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># Traceback (most recent call last):</span>
<span class="token comment">#   File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span>
<span class="token comment"># __main__.MyCustomException: A custom message for my custom exception</span>
</code></pre><p>Handling a custom exception is the same as any other:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">try</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">raise</span> MyCustomException<span class="token punctuation">(</span><span class="token string">&#39;A custom message for my custom exception&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">except</span> MyCustomException<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;My custom exception was raised&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># My custom exception was raised</span>
</code></pre>`,16),q="Python Exception Handling - Python Cheatsheet",M="In Python, exception handling is the process of responding to the occurrence of exceptions.",H=[{property:"og:title",content:"Python Exception Handling - Python Cheatsheet"},{property:"og:description",content:"In Python, exception handling is the process of responding to the occurrence of exceptions."},{name:"description",content:"In Python, exception handling is the process of responding to the occurrence of exceptions."}],I={__name:"19-exception-handling",setup(w,{expose:o}){const a={title:"Python Exception Handling - Python Cheatsheet",description:"In Python, exception handling is the process of responding to the occurrence of exceptions.",meta:[{property:"og:title",content:"Python Exception Handling - Python Cheatsheet"},{property:"og:description",content:"In Python, exception handling is the process of responding to the occurrence of exceptions."},{name:"description",content:"In Python, exception handling is the process of responding to the occurrence of exceptions."}]};return o({frontmatter:a}),k({title:"Python Exception Handling - Python Cheatsheet",meta:[{property:"og:title",content:"Python Exception Handling - Python Cheatsheet"},{property:"og:description",content:"In Python, exception handling is the process of responding to the occurrence of exceptions."},{name:"description",content:"In Python, exception handling is the process of responding to the occurrence of exceptions."}]}),(v,E)=>{const e=m,p=u,c=r,i=l;return d(),g("div",x,[n(e,{title:a.title,description:a.description},{default:s(()=>[t(" Python Exception Handling ")]),_:1},8,["title","description"]),n(i,null,{default:s(()=>[n(p,null,{default:s(()=>[_]),_:1}),n(c,null,{default:s(()=>[t(" In computing and computer programming, exception handling is the process of responding to the occurrence of exceptions \u2013 anomalous or exceptional conditions requiring special processing. ")]),_:1})]),_:1}),f])}}};export{I as default,M as description,H as meta,q as title};
