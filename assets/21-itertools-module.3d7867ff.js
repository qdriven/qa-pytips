import{_ as r,a as k,b as i}from"./BaseDisclaimerTitle.631caf82.js";import{q as m,o as g,c as d,b as a,f as t,e as s,s as n,t as h,B as b}from"./app.e6b4b7b5.js";const y={class:"markdown-body"},f=s("p",null,[n("The "),s("em",null,"itertools"),n(" module is a collection of tools intended to be fast and use memory efficiently when handling iterators (like "),s("a",{href:"#lists"},"lists"),n(" or "),s("a",{href:"#dictionaries-and-structuring-data"},"dictionaries"),n(").")],-1),w=s("a",{href:"https://docs.python.org/3/library/itertools.html"},"Python 3 documentation",-1),_=h(`<p>The <em>itertools</em> module comes in the standard library and must be imported.</p><p>The <a href="https://docs.python.org/3/library/operator.html" target="_blank" rel="noopener">operator</a> module will also be used. This module is not necessary when using itertools, but needed for some of the examples below.</p><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> itertools
<span class="token keyword">import</span> operator
</code></pre><h2 id="accumulate" tabindex="-1">accumulate()</h2><p>Makes an iterator that returns the results of a function.</p><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>iterable<span class="token punctuation">[</span><span class="token punctuation">,</span> func<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>data<span class="token punctuation">,</span> operator<span class="token punctuation">.</span>mul<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># 1</span>
<span class="token comment"># 2</span>
<span class="token comment"># 6</span>
<span class="token comment"># 24</span>
<span class="token comment"># 120</span>
</code></pre><p>The operator.mul takes two numbers and multiplies them:</p><pre class="language-python"><code class="language-python">operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment"># 2</span>

operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment"># 6</span>

operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token comment"># 24</span>

operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token comment"># 120</span>
</code></pre><p>Passing a function is optional:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># 5</span>
<span class="token comment"># 7</span>
<span class="token comment"># 13</span>
<span class="token comment"># 17</span>
<span class="token comment"># 22</span>
<span class="token comment"># 31</span>
<span class="token comment"># 32</span>
</code></pre><p>If no function is designated the items will be summed:</p><pre class="language-python"><code class="language-python"><span class="token number">5</span>
<span class="token number">5</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">7</span>
<span class="token number">7</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">13</span>
<span class="token number">13</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">17</span>
<span class="token number">17</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">22</span>
<span class="token number">22</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">=</span> <span class="token number">31</span>
<span class="token number">31</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">32</span>
</code></pre><h2 id="combinations" tabindex="-1">combinations()</h2><p>Takes an iterable and a integer. This will create all the unique combination that have r members.</p><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;circle&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;triangle&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;square&#39;</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># (&#39;circle&#39;, &#39;triangle&#39;)</span>
<span class="token comment"># (&#39;circle&#39;, &#39;square&#39;)</span>
<span class="token comment"># (&#39;triangle&#39;, &#39;square&#39;)</span>
</code></pre><h2 id="combinations-with-replacement" tabindex="-1">combinations_with_replacement()</h2><p>Just like combinations(), but allows individual elements to be repeated more than once.</p><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>combinations_with_replacement<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;circle&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;triangle&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;square&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>combinations_with_replacement<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># (&#39;circle&#39;, &#39;circle&#39;)</span>
<span class="token comment"># (&#39;circle&#39;, &#39;triangle&#39;)</span>
<span class="token comment"># (&#39;circle&#39;, &#39;square&#39;)</span>
<span class="token comment"># (&#39;triangle&#39;, &#39;triangle&#39;)</span>
<span class="token comment"># (&#39;triangle&#39;, &#39;square&#39;)</span>
<span class="token comment"># (&#39;square&#39;, &#39;square&#39;)</span>
</code></pre><h2 id="count" tabindex="-1">count()</h2><p>Makes an iterator that returns evenly spaced values starting with number start.</p><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>count<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">break</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># 10</span>
<span class="token comment"># 13</span>
<span class="token comment"># 16</span>
<span class="token comment"># 19</span>
<span class="token comment"># 22</span>
</code></pre><h2 id="cycle" tabindex="-1">cycle()</h2><p>This function cycles through an iterator endlessly.</p><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>cycle<span class="token punctuation">(</span>iterable<span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;violet&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> color <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>cycle<span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># red</span>
<span class="token comment"># orange</span>
<span class="token comment"># yellow</span>
<span class="token comment"># green</span>
<span class="token comment"># blue</span>
<span class="token comment"># violet</span>
<span class="token comment"># red</span>
<span class="token comment"># orange</span>
</code></pre><p>When reached the end of the iterable it start over again from the beginning.</p><h2 id="chain" tabindex="-1">chain()</h2><p>Take a series of iterables and return them as one long iterable.</p><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token operator">*</span>iterables<span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;circle&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;triangle&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;square&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pentagon&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>chain<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> shapes<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># red</span>
<span class="token comment"># orange</span>
<span class="token comment"># yellow</span>
<span class="token comment"># green</span>
<span class="token comment"># blue</span>
<span class="token comment"># circle</span>
<span class="token comment"># triangle</span>
<span class="token comment"># square</span>
<span class="token comment"># pentagon</span>
</code></pre><h2 id="compress" tabindex="-1">compress()</h2><p>Filters one iterable with another.</p><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>data<span class="token punctuation">,</span> selectors<span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;circle&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;triangle&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;square&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pentagon&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> selections <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> selections<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># circle</span>
<span class="token comment"># square</span>
</code></pre><h2 id="dropwhile" tabindex="-1">dropwhile()</h2><p>Make an iterator that drops elements from the iterable as long as the predicate is true; afterwards, returns every element.</p><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>dropwhile<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>dropwhile<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># 5</span>
<span class="token comment"># 6</span>
<span class="token comment"># 7</span>
<span class="token comment"># 8</span>
<span class="token comment"># 9</span>
<span class="token comment"># 10</span>
<span class="token comment"># 1</span>
</code></pre><h2 id="filterfalse" tabindex="-1">filterfalse()</h2><p>Makes an iterator that filters elements from iterable returning only those for which the predicate is False.</p><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>filterfalse<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>filterfalse<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># 5</span>
<span class="token comment"># 6</span>
<span class="token comment"># 7</span>
<span class="token comment"># 8</span>
<span class="token comment"># 9</span>
<span class="token comment"># 10</span>
</code></pre><h2 id="groupby" tabindex="-1">groupby()</h2><p>Simply put, this function groups things together.</p><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robots <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;blaster&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;faction&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;autobot&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;galvatron&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;faction&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;decepticon&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;jazz&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;faction&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;autobot&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;metroplex&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;faction&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;autobot&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;megatron&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;faction&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;decepticon&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;starcream&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;faction&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;decepticon&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> group <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>robots<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">&#39;faction&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># autobot</span>
<span class="token comment"># [{&#39;name&#39;: &#39;blaster&#39;, &#39;faction&#39;: &#39;autobot&#39;}]</span>
<span class="token comment"># decepticon</span>
<span class="token comment"># [{&#39;name&#39;: &#39;galvatron&#39;, &#39;faction&#39;: &#39;decepticon&#39;}]</span>
<span class="token comment"># autobot</span>
<span class="token comment"># [{&#39;name&#39;: &#39;jazz&#39;, &#39;faction&#39;: &#39;autobot&#39;}, {&#39;name&#39;: &#39;metroplex&#39;, &#39;faction&#39;: &#39;autobot&#39;}]</span>
<span class="token comment"># decepticon</span>
<span class="token comment"># [{&#39;name&#39;: &#39;megatron&#39;, &#39;faction&#39;: &#39;decepticon&#39;}, {&#39;name&#39;: &#39;starcream&#39;, &#39;faction&#39;: &#39;decepticon&#39;}]</span>
</code></pre><h2 id="islice" tabindex="-1">islice()</h2><p>This function is very much like slices. This allows you to cut out a piece of an iterable.</p><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>islice<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop<span class="token punctuation">[</span><span class="token punctuation">,</span> step<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> few_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>islice<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> few_colors<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># red</span>
<span class="token comment"># orange</span>
</code></pre><h2 id="permutations" tabindex="-1">permutations()</h2><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>alpha_data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</span>
<span class="token comment"># (&#39;a&#39;, &#39;c&#39;, &#39;b&#39;)</span>
<span class="token comment"># (&#39;b&#39;, &#39;a&#39;, &#39;c&#39;)</span>
<span class="token comment"># (&#39;b&#39;, &#39;c&#39;, &#39;a&#39;)</span>
<span class="token comment"># (&#39;c&#39;, &#39;a&#39;, &#39;b&#39;)</span>
<span class="token comment"># (&#39;c&#39;, &#39;b&#39;, &#39;a&#39;)</span>
</code></pre><h2 id="product" tabindex="-1">product()</h2><p>Creates the cartesian products from a series of iterables.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> num_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span>num_data<span class="token punctuation">,</span> alpha_data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># (1, &#39;a&#39;)</span>
<span class="token comment"># (1, &#39;b&#39;)</span>
<span class="token comment"># (1, &#39;c&#39;)</span>
<span class="token comment"># (2, &#39;a&#39;)</span>
<span class="token comment"># (2, &#39;b&#39;)</span>
<span class="token comment"># (2, &#39;c&#39;)</span>
<span class="token comment"># (3, &#39;a&#39;)</span>
<span class="token comment"># (3, &#39;b&#39;)</span>
<span class="token comment"># (3, &#39;c&#39;)</span>
</code></pre><h2 id="repeat" tabindex="-1">repeat()</h2><p>This function will repeat an object over and over again. Unless, there is a times argument.</p><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">[</span><span class="token punctuation">,</span> times<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token string">&quot;spam&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># spam</span>
<span class="token comment"># spam</span>
<span class="token comment"># spam</span>
</code></pre><h2 id="starmap" tabindex="-1">starmap()</h2><p>Makes an iterator that computes the function using arguments obtained from the iterable.</p><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>starmap<span class="token punctuation">(</span>function<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>starmap<span class="token punctuation">(</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># 12</span>
<span class="token comment"># 32</span>
<span class="token comment"># 21</span>
</code></pre><h2 id="takewhile" tabindex="-1">takewhile()</h2><p>The opposite of dropwhile(). Makes an iterator and returns elements from the iterable as long as the predicate is true.</p><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>takewhile<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>takewhile<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># 1</span>
<span class="token comment"># 2</span>
<span class="token comment"># 3</span>
<span class="token comment"># 4</span>
</code></pre><h2 id="tee" tabindex="-1">tee()</h2><p>Return n independent iterators from a single iterable.</p><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_colors<span class="token punctuation">,</span> beta_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>colors<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> alpha_colors<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># red</span>
<span class="token comment"># orange</span>
<span class="token comment"># yellow</span>
<span class="token comment"># green</span>
<span class="token comment"># blue</span>
</code></pre><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_colors<span class="token punctuation">,</span> beta_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>colors<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> beta_colors<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># red</span>
<span class="token comment"># orange</span>
<span class="token comment"># yellow</span>
<span class="token comment"># green</span>
<span class="token comment"># blue</span>
</code></pre><h2 id="zip-longest" tabindex="-1">zip_longest()</h2><p>Makes an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with <code>fillvalue</code>. Iteration continues until the longest iterable is exhausted.</p><pre class="language-python"><code class="language-python">itertools<span class="token punctuation">.</span>zip_longest<span class="token punctuation">(</span><span class="token operator">*</span>iterables<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><p>Example:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>zip_longest<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> data<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># (&#39;red&#39;, 1)</span>
<span class="token comment"># (&#39;orange&#39;, 2)</span>
<span class="token comment"># (&#39;yellow&#39;, 3)</span>
<span class="token comment"># (&#39;green&#39;, 4)</span>
<span class="token comment"># (&#39;blue&#39;, 5)</span>
<span class="token comment"># (None, 6)</span>
<span class="token comment"># (None, 7)</span>
<span class="token comment"># (None, 8)</span>
<span class="token comment"># (None, 9)</span>
<span class="token comment"># (None, 10)</span>
</code></pre>`,98),M="Python Itertools Module - Python Cheatsheet",N="The itertools module is a collection of tools intended to be fast and use memory efficiently when handling iterators (like lists or dictionaries).",z=[{property:"og:title",content:"Python Itertools Module - Python Cheatsheet"},{property:"og:description",content:"The itertools module is a collection of tools intended to be fast and use memory efficiently when handling iterators (like lists or dictionaries)."},{name:"description",content:"The itertools module is a collection of tools intended to be fast and use memory efficiently when handling iterators (like lists or dictionaries)."}],I={__name:"21-itertools-module",setup(q,{expose:o}){const p={title:"Python Itertools Module - Python Cheatsheet",description:"The itertools module is a collection of tools intended to be fast and use memory efficiently when handling iterators (like lists or dictionaries).",meta:[{property:"og:title",content:"Python Itertools Module - Python Cheatsheet"},{property:"og:description",content:"The itertools module is a collection of tools intended to be fast and use memory efficiently when handling iterators (like lists or dictionaries)."},{name:"description",content:"The itertools module is a collection of tools intended to be fast and use memory efficiently when handling iterators (like lists or dictionaries)."}]};return o({frontmatter:p}),m({title:"Python Itertools Module - Python Cheatsheet",meta:[{property:"og:title",content:"Python Itertools Module - Python Cheatsheet"},{property:"og:description",content:"The itertools module is a collection of tools intended to be fast and use memory efficiently when handling iterators (like lists or dictionaries)."},{name:"description",content:"The itertools module is a collection of tools intended to be fast and use memory efficiently when handling iterators (like lists or dictionaries)."}]}),(T,v)=>{const e=b,c=k,l=i,u=r;return g(),d("div",y,[a(e,{title:p.title,description:p.description},{default:t(()=>[n(" Python Itertools Module ")]),_:1},8,["title","description"]),f,a(u,null,{default:t(()=>[a(c,null,{default:t(()=>[n(" From the "),w]),_:1}),a(l,null,{default:t(()=>[n(" The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an \u201Citerator algebra\u201D making it possible to construct specialized tools succinctly and efficiently in pure Python. ")]),_:1})]),_:1}),_])}}};export{I as default,N as description,z as meta,M as title};
