import{_ as g,a as h,b}from"./BaseWarningTitle.f5a386c9.js";import{_ as y,a as w,b as _}from"./BaseDisclaimerTitle.631caf82.js";import{_ as f}from"./BlogTitleHeader.vue_vue_type_script_setup_true_lang.c6957e31.js";import{b as k}from"./route-block.6ee55eda.js";import{q as v,o as x,c as S,b as a,f as t,e as s,s as n,t as e}from"./app.e6b4b7b5.js";const P={class:"markdown-body"},W=s("p",null,[n("Python comes equipped with several built-in data types to help us organize our data. These structures include "),s("code",null,"lists"),n(", "),s("code",null,"dictionaries"),n(", "),s("code",null,"tuples"),n(" and "),s("code",null,"sets"),n(".")],-1),I=s("a",{target:"_blank",href:"https://docs.python.org/3/tutorial/datastructures.html#sets"},"Python 3 documentation",-1),q=s("code",null,"set",-1),T=s("b",null,"unordered collection",-1),O=s("b",null,"duplicate elements",-1),j=s("b",null,"membership testing",-1),A=s("b",null,"eliminating duplicate entries",-1),N=s("b",null,"union",-1),E=s("b",null,"intersection",-1),H=s("b",null,"difference",-1),C=s("b",null,"symmetric difference",-1),F=e(`<p>In this article, we are going to review every one of the elements listed in the above definition. Let\u2019s start right away and see how we can create them.</p><h2 id="initializing-a-set" tabindex="-1">Initializing a Set</h2><p>There are two ways to create a set: one is to use the built-in function <code>set()</code> and pass a <code>list</code> of elements, and the other is to use the curly braces <code>{}</code>.</p><h3 id="initializing-a-set-using-the-set-built-in-function" tabindex="-1">Initializing a set using the <code>set()</code> built-in function</h3><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1
<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;set&#39;</span><span class="token operator">&gt;</span>
</code></pre><h3 id="initializing-a-set-using-curly-braces" tabindex="-1">Initializing a set using curly braces <code>{}</code></h3><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2
<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;set&#39;</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
</code></pre>`,7),B=s("code",null,"{}",-1),z=e(`<pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;dict&#39;</span><span class="token operator">&gt;</span>
</code></pre><p>It\u2019s a good moment to mention that for the sake of simplicity, all the examples provided in this article will use single digit integers, but sets can have all the <a href="https://docs.python.org/3/glossary.html#term-hashable" target="_blank" rel="noopener">hashable</a> data types that Python support. In other words, integers, strings and tuples, but not <em>mutable</em> items like <em>lists</em> or <em>dictionaries</em>:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;coffee&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;python&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
TypeError<span class="token punctuation">:</span> unhashable <span class="token builtin">type</span><span class="token punctuation">:</span> <span class="token string">&#39;list&#39;</span>
</code></pre><p>Now that you know how to create a set and what type of elements it can have, let\u2019s continue and see <em>why</em> we should always have them in our arsenals.</p><h2 id="why-you-should-use-them" tabindex="-1">Why you should Use them</h2><p>We can write code in more than a single way. Some are considered to be pretty bad, and others, <em>clear, concise and maintainable</em>. Or \u201C<a href="http://docs.python-guide.org/en/latest/writing/style/" target="_blank" rel="noopener"><em>pythonic</em></a>\u201D.</p>`,6),J=s("a",{target:"_blank",href:"http://docs.python-guide.org/en/latest/"},"The Hitchhiker\u2019s Guide to Python",-1),L=e(`<p>Let\u2019s start exploring the way that Python sets can help us not just with readability, but also with our program\u2019s execution time.</p><h2 id="unordered-collection-of-elements" tabindex="-1">Unordered collection of elements</h2><p>First things first: you can\u2019t access a <code>set</code> object using indexes.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
TypeError<span class="token punctuation">:</span> <span class="token string">&#39;set&#39;</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support indexing
</code></pre><p>Or modify them with slices:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
TypeError<span class="token punctuation">:</span> <span class="token string">&#39;set&#39;</span> <span class="token builtin">object</span> <span class="token keyword">is</span> <span class="token keyword">not</span> subscriptable
</code></pre><p><em>BUT</em>, if what we need is to remove duplicates, or do mathematical operations like combining lists (unions), we can, and <em>SHOULD</em> always use sets.</p><p>I have to mention that <strong>when iterating over, lists outperform\xA0sets</strong>, so prefer them if that is what you need. Why? Well, this article does not intend to explain the inner workings of sets, but here are a couple of links where you can read about it:</p><ul><li><a href="https://wiki.python.org/moin/TimeComplexity" target="_blank" rel="noopener">Time Complexity</a></li><li><a href="https://stackoverflow.com/questions/3949310/how-is-set-implemented" target="_blank" rel="noopener">How is set() implemented?</a></li><li><a href="https://stackoverflow.com/questions/2831212/python-sets-vs-lists" target="_blank" rel="noopener">Python Sets vs Lists</a></li><li><a href="https://mail.python.org/pipermail/python-list/2011-June/606738.html" target="_blank" rel="noopener">Is there any advantage or disadvantage to using sets over list comps to ensure a list of unique entries?</a></li></ul><h2 id="no-duplicate-items" tabindex="-1">No duplicate items</h2><p>While writing this, I cannot stop thinking in all the times I used a <em>for</em> loop and the <em>if</em> statement to check and remove duplicate elements in a list. My face turns red remembering that, more than once, I wrote something like this:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no_duplicate_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> my_list<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> item <span class="token keyword">not</span> <span class="token keyword">in</span> no_duplicate_list<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             no_duplicate_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no_duplicate_list
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
</code></pre><p>Or used a list comprehension:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no_duplicate_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>no_duplicate_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> my_list <span class="token keyword">if</span> item <span class="token keyword">not</span> <span class="token keyword">in</span> no_duplicate_list<span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no_duplicate_list
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
</code></pre><p>But it\u2019s ok, nothing of that matters anymore because we now have the sets:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no_duplicate_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no_duplicate_list
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
</code></pre><h2 id="sets-performance" tabindex="-1">Sets performance</h2><p>Now let\u2019s use the <em>timeit</em> module and see the execution time of lists and sets when removing duplicates:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> timeit <span class="token keyword">import</span> timeit
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">no_duplicates</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     no_duplicate_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">[</span>no_duplicate_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">list</span> <span class="token keyword">if</span> item <span class="token keyword">not</span> <span class="token keyword">in</span> no_duplicate_list<span class="token punctuation">]</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> no_duplicate_list
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># first, let&#39;s see how the list perform:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>timeit<span class="token punctuation">(</span><span class="token string">&#39;no_duplicates([1, 2, 3, 1, 7])&#39;</span><span class="token punctuation">,</span> <span class="token builtin">globals</span><span class="token operator">=</span><span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> number<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">0.0018683355819786227</span>
</code></pre><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> timeit <span class="token keyword">import</span> timeit
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># and the set:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>timeit<span class="token punctuation">(</span><span class="token string">&#39;list(set([1, 2, 3, 1, 2, 3, 4]))&#39;</span><span class="token punctuation">,</span> number<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">0.0010220493243764395</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># faster and cleaner =)</span>
</code></pre><p>Not only we write <em>fewer lines of code</em> with sets than with lists comprehensions, we also obtain more <em>readable</em> and <em>performant</em> code.</p>`,21),U=e(`<p>From the <a href="https://www.python.org/dev/peps/pep-0020/" target="_blank" rel="noopener">Zen of Python</a>:</p><blockquote><p>Beautiful is better than ugly. <br> Explicit is better than implicit.<br> Simple is better than complex.<br> Flat is better than nested.</p></blockquote><p>Aren\u2019t sets just Beautiful, Explicit, Simple, and Flat?</p><h2 id="membership-tests" tabindex="-1">Membership tests</h2><p>Every time we use an <em>if</em> statement to check if an element is, for example, in a list, you are doing a membership test:</p><pre class="language-python"><code class="language-python">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> <span class="token number">2</span> <span class="token keyword">in</span> my_list<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Yes, this is a membership test!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># Yes, this is a membership test!</span>
</code></pre><p>And sets are more performant than lists when doing them:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> timeit <span class="token keyword">import</span> timeit
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">in_test</span><span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">if</span> i <span class="token keyword">in</span> iterable<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                     <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> timeit<span class="token punctuation">(</span><span class="token string">&#39;in_test(iterable)&#39;</span><span class="token punctuation">,</span> setup<span class="token operator">=</span><span class="token string">&quot;from __main__ import in_test; iterable = list(range(1000))&quot;</span><span class="token punctuation">,</span> number<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token comment"># 12.459663048726043</span>
</code></pre><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> timeit <span class="token keyword">import</span> timeit
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">in_test</span><span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">if</span> i <span class="token keyword">in</span> iterable<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                     <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> timeit<span class="token punctuation">(</span><span class="token string">&#39;in_test(iterable)&#39;</span><span class="token punctuation">,</span> setup<span class="token operator">=</span><span class="token string">&quot;from __main__ import in_test; iterable = set(range(1000))&quot;</span><span class="token punctuation">,</span> number<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token comment"># 0.12354438152988223</span>
</code></pre><p>The above tests come from this <a href="https://stackoverflow.com/questions/2831212/python-sets-vs-lists" target="_blank" rel="noopener">Stack Overflow thread</a>.</p><p>So if you are doing comparisons like this in massive lists, it should speed you a good bit if you convert that list into a set.</p><h2 id="adding-elements" tabindex="-1">Adding Elements</h2><p>Depending on the number of elements to add, we will have to choose between the <code>add()</code> and <code>update()</code> methods.</p><p><code>add()</code> Will add a single element:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s
<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>
</code></pre><p>And <code>update()</code> multiple ones:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s
<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>
</code></pre><p>Remember, sets remove duplicates.</p><h2 id="removing-elements" tabindex="-1">Removing Elements</h2><p>If you want to be alerted when your code tries to remove an element that is not in the set, use <code>remove()</code>. Otherwise, <code>discard()</code> provides a suitable alternative:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s
<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment"># Traceback (most recent call last):</span>
<span class="token comment">#   File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span>
<span class="token comment"># KeyError: 3</span>
</code></pre><p><code>discard()</code> won\u2019t raise any errors:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s
<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># nothing happens!</span>
</code></pre><p>We can also use <code>pop()</code> to randomly discard an element:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># removes an arbitrary element</span>
<span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s
<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
</code></pre><p>Or <code>clear()</code> to remove all the values from a set:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># discard all the items</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s
<span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><h2 id="the-union-method" tabindex="-1">The union() method</h2><p><code>union()</code> or <code>|</code> will create a new set that contains all the elements from the sets we provide:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>union<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment"># or &#39;s1 | s2&#39;</span>
<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
</code></pre><h2 id="the-intersection-method" tabindex="-1">The intersection() method</h2><p><code>intersection</code> or <code>&amp;</code> will return a set containing only the elements that are common in all of them:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>s2<span class="token punctuation">,</span> s3<span class="token punctuation">)</span>  <span class="token comment"># or &#39;s1 &amp; s2 &amp; s3&#39;</span>
<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><h2 id="the-difference-method" tabindex="-1">The difference() method</h2><p>Difference creates a new set with the values that are in \u201Cs1\u201D but not in \u201Cs2\u201D:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment"># or &#39;s1 - s2&#39;</span>
<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>
</code></pre><h2 id="symmetric-difference" tabindex="-1">symmetric_difference()</h2><p><code>symmetric_difference</code> or <code>^</code> will return all the values that are not common between the sets.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>symmetric_difference<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment"># or &#39;s1 ^ s2&#39;</span>
<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>
</code></pre><h2 id="conclusions" tabindex="-1">Conclusions</h2><p>I hope that after reading this article you know what a set is, how to manipulate their elements and the operations they can perform. Knowing when to use a set will definitely help you write cleaner code and speed up your programs.</p>`,41),X="Python Sets: What, Why and How - Python Cheatsheet",nn="When writing code, you can do it in more than a single way. Some are considered to be bad, and others, clear, concise and maintainable. Or pythonic. In this Article we are going to explore the way that Python Sets can help us not just with readability, but also speeding up our programs execution time.",sn="July 27, 2018",an="July 3, 2022",tn="python, basics",en=[{property:"og:title",content:"Python Sets: What, Why and How - Python Cheatsheet"},{property:"og:description",content:"When writing code, you can do it in more than a single way. Some are considered to be bad, and others, clear, concise and maintainable. Or pythonic. In this Article we are going to explore the way that Python Sets can help us not just with readability, but also speeding up our programs execution time."},{name:"description",content:"When writing code, you can do it in more than a single way. Some are considered to be bad, and others, clear, concise and maintainable. Or pythonic. In this Article we are going to explore the way that Python Sets can help us not just with readability, but also speeding up our programs execution time."}],V={__name:"python-sets-what-why-how",setup(D,{expose:m}){const p={title:"Python Sets: What, Why and How - Python Cheatsheet",description:"When writing code, you can do it in more than a single way. Some are considered to be bad, and others, clear, concise and maintainable. Or pythonic. In this Article we are going to explore the way that Python Sets can help us not just with readability, but also speeding up our programs execution time.",date:"July 27, 2018",updated:"July 3, 2022",tags:"python, basics",meta:[{property:"og:title",content:"Python Sets: What, Why and How - Python Cheatsheet"},{property:"og:description",content:"When writing code, you can do it in more than a single way. Some are considered to be bad, and others, clear, concise and maintainable. Or pythonic. In this Article we are going to explore the way that Python Sets can help us not just with readability, but also speeding up our programs execution time."},{name:"description",content:"When writing code, you can do it in more than a single way. Some are considered to be bad, and others, clear, concise and maintainable. Or pythonic. In this Article we are going to explore the way that Python Sets can help us not just with readability, but also speeding up our programs execution time."}]};return m({frontmatter:p}),v({title:"Python Sets: What, Why and How - Python Cheatsheet",meta:[{property:"og:title",content:"Python Sets: What, Why and How - Python Cheatsheet"},{property:"og:description",content:"When writing code, you can do it in more than a single way. Some are considered to be bad, and others, clear, concise and maintainable. Or pythonic. In this Article we are going to explore the way that Python Sets can help us not just with readability, but also speeding up our programs execution time."},{name:"description",content:"When writing code, you can do it in more than a single way. Some are considered to be bad, and others, clear, concise and maintainable. Or pythonic. In this Article we are going to explore the way that Python Sets can help us not just with readability, but also speeding up our programs execution time."}]}),(M,R)=>{const d=f,o=w,c=_,l=y,u=h,i=b,r=g;return x(),S("div",P,[a(d,{frontmatter:p,title:"Python Sets: What, Why and How"}),W,a(l,null,{default:t(()=>[a(o,null,{default:t(()=>[n(" From the "),I]),_:1}),a(c,null,{default:t(()=>[n(" A "),q,n(" is an "),T,n(" with no "),O,n(". Basic uses include "),j,n(" and "),A,n(". Set objects also support mathematical operations like "),N,n(", "),E,n(", "),H,n(", and "),C]),_:1})]),_:1}),F,a(r,null,{default:t(()=>[a(u,null,{default:t(()=>[n(" Empty Sets ")]),_:1}),a(i,null,{default:t(()=>[n(" When creating set, be sure to not use empty curly braces "),B,n(" or you will get an empty dictionary instead. ")]),_:1})]),_:1}),z,a(l,null,{default:t(()=>[a(o,null,{default:t(()=>[n(" From "),J]),_:1}),a(c,null,{default:t(()=>[n(" When a veteran Python developer (a Pythonista) calls portions of code not \u201CPythonic\u201D, they usually mean that these lines of code do not follow the common guidelines and fail to express its intent in what is considered the best (hear: most readable) way. ")]),_:1})]),_:1}),L,a(r,null,{default:t(()=>[a(u,null,{default:t(()=>[n(" remember that sets are unordered ")]),_:1}),a(i,null,{default:t(()=>[n(" There is no guarantee that when converting them back to a list, the order of the elements will be preserved. ")]),_:1})]),_:1}),U])}}};typeof k=="function"&&k(V);export{sn as date,V as default,nn as description,en as meta,tn as tags,X as title,an as updated};
