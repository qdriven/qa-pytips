import{_ as l,a as i,b as u}from"./BaseDisclaimerTitle.631caf82.js";import{q as g,o as k,c as h,b as n,f as a,t as d,B as m,s as t,e as b}from"./app.e6b4b7b5.js";const y={class:"markdown-body"},x=b("a",{target:"_blank",href:"https://en.wikipedia.org/wiki/Regular_expression"},"Regular expressions",-1),_=d(`<ol><li>Import the regex module with <code>import re</code>.</li><li>Create a Regex object with the <code>re.compile()</code> function. (Remember to use a raw string.)</li><li>Pass the string you want to search into the Regex object\u2019s <code>search()</code> method. This returns a <code>Match</code> object.</li><li>Call the Match object\u2019s <code>group()</code> method to return a string of the actual matched text.</li></ol><p>All the regex functions in Python are in the re module:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> re
</code></pre><h2 id="regex-symbols" tabindex="-1">Regex symbols</h2><table><thead><tr><th>Symbol</th><th>Matches</th></tr></thead><tbody><tr><td><code>?</code></td><td>zero or one of the preceding group.</td></tr><tr><td><code>*</code></td><td>zero or more of the preceding group.</td></tr><tr><td><code>+</code></td><td>one or more of the preceding group.</td></tr><tr><td><code>{n}</code></td><td>exactly n of the preceding group.</td></tr><tr><td><code>{n,}</code></td><td>n or more of the preceding group.</td></tr><tr><td><code>{,m}</code></td><td>0 to m of the preceding group.</td></tr><tr><td><code>{n,m}</code></td><td>at least n and at most m of the preceding p.</td></tr><tr><td><code>{n,m}?</code> or <code>*?</code> or <code>+?</code></td><td>performs a non-greedy match of the preceding p.</td></tr><tr><td><code>^spam</code></td><td>means the string must begin with spam.</td></tr><tr><td><code>spam$</code></td><td>means the string must end with spam.</td></tr><tr><td><code>.</code></td><td>any character, except newline characters.</td></tr><tr><td><code>\\d</code>, <code>\\w</code>, and <code>\\s</code></td><td>a digit, word, or space character, respectively.</td></tr><tr><td><code>\\D</code>, <code>\\W</code>, and <code>\\S</code></td><td>anything except a digit, word, or space, respectively.</td></tr><tr><td><code>[abc]</code></td><td>any character between the brackets (such as a, b, ).</td></tr><tr><td><code>[^abc]</code></td><td>any character that isn\u2019t between the brackets.</td></tr></tbody></table><h2 id="matching-regex-objects" tabindex="-1">Matching regex objects</h2><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> phone_num_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;My number is 415-555-4242.&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;Phone number found: </span><span class="token interpolation"><span class="token punctuation">{</span>mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
<span class="token comment"># Phone number found: 415-555-4242</span>
</code></pre><h2 id="grouping-with-parentheses" tabindex="-1">Grouping with parentheses</h2><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;(\\d\\d\\d)-(\\d\\d\\d-\\d\\d\\d\\d)&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> phone_num_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;My number is 415-555-4242.&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;415&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;555-4242&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;415-555-4242&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;415-555-4242&#39;</span>
</code></pre><p>To retrieve all the groups at once use the <code>groups()</code> method:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token string">&#39;415&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;555-4242&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> area_code<span class="token punctuation">,</span> main_number <span class="token operator">=</span> mo<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>area_code<span class="token punctuation">)</span>
<span class="token number">415</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>main_number<span class="token punctuation">)</span>
<span class="token number">555</span><span class="token operator">-</span><span class="token number">4242</span>
</code></pre><h2 id="multiple-groups-with-pipe" tabindex="-1">Multiple groups with Pipe</h2><p>You can use the <code>|</code> character anywhere you want to match one of many expressions.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hero_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span> <span class="token punctuation">(</span><span class="token string">r&#39;Batman|Tina Fey&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> hero_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;Batman and Tina Fey.&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;Batman&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> hero_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;Tina Fey and Batman.&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;Tina Fey&#39;</span>
</code></pre><p>You can also use the pipe to match one of several patterns as part of your regex:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;Bat(man|mobile|copter|bat)&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;Batmobile lost a wheel&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;Batmobile&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;mobile&#39;</span>
</code></pre><h2 id="optional-matching-with-the-question-mark" tabindex="-1">Optional matching with the Question Mark</h2><p>The <code>?</code> character flags the group that precedes it as an optional part of the pattern.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;Bat(wo)?man&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;The Adventures of Batman&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;Batman&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;The Adventures of Batwoman&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;Batwoman&#39;</span>
</code></pre><h2 id="matching-zero-or-more-with-the-star" tabindex="-1">Matching zero or more with the Star</h2><p>The <code>*</code> (star or asterisk) means \u201Cmatch zero or more\u201D. The group that precedes the star can occur any number of times in the text.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;Bat(wo)*man&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;The Adventures of Batman&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">&#39;Batman&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;The Adventures of Batwoman&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">&#39;Batwoman&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;The Adventures of Batwowowowoman&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">&#39;Batwowowowoman&#39;</span>
</code></pre><h2 id="matching-one-or-more-with-the-plus" tabindex="-1">Matching one or more with the Plus</h2><p>The <code>+</code> (or plus) <em>means match one or more</em>. The group preceding a plus must appear at least once:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;Bat(wo)+man&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;The Adventures of Batwoman&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;Batwoman&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;The Adventures of Batwowowowoman&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;Batwowowowoman&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;The Adventures of Batman&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3 <span class="token keyword">is</span> <span class="token boolean">None</span>
<span class="token comment"># True</span>
</code></pre><h2 id="matching-specific-repetitions-with-curly-brackets" tabindex="-1">Matching specific repetitions with Curly Brackets</h2><p>If you have a group that you want to repeat a specific number of times, follow the group in your regex with a number in curly brackets:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ha_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;(Ha){3}&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;HaHaHa&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;HaHaHa&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;Ha&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token keyword">is</span> <span class="token boolean">None</span>
<span class="token comment"># True</span>
</code></pre><p>Instead of one number, you can specify a range with minimum and a maximum in between the curly brackets. For example, the regex (Ha){3,5} will match \u2018HaHaHa\u2019, \u2018HaHaHaHa\u2019, and \u2018HaHaHaHaHa\u2019.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ha_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;(Ha){2,3}&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;HaHaHaHa&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;HaHaHa&#39;</span>
</code></pre><h2 id="greedy-and-non-greedy-matching" tabindex="-1">Greedy and non-greedy matching</h2><p>Python\u2019s regular expressions are greedy by default: in ambiguous situations they will match the longest string possible. The non-greedy version of the curly brackets, which matches the shortest string possible, has the closing curly bracket followed by a question mark.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> greedy_ha_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;(Ha){3,5}&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> greedy_ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;HaHaHaHaHa&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;HaHaHaHaHa&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> non_greedy_ha_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;(Ha){3,5}?&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> non_greedy_ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;HaHaHaHaHa&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;HaHaHa&#39;</span>
</code></pre><h2 id="the-findall-method" tabindex="-1">The findall() method</h2><p>The <code>findall()</code> method will return the strings of every match in the searched string.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d&#39;</span><span class="token punctuation">)</span> <span class="token comment"># has no groups</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&#39;Cell: 415-555-9999 Work: 212-555-0000&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># [&#39;415-555-9999&#39;, &#39;212-555-0000&#39;]</span>
</code></pre><h2 id="making-your-own-character-classes" tabindex="-1">Making your own character classes</h2><p>You can define your own character class using square brackets. For example, the character class <em>[aeiouAEIOU]</em> will match any vowel, both lowercase and uppercase.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> vowel_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;[aeiouAEIOU]&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> vowel_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&#39;Robocop eats baby food. BABY FOOD.&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># [&#39;o&#39;, &#39;o&#39;, &#39;o&#39;, &#39;e&#39;, &#39;a&#39;, &#39;a&#39;, &#39;o&#39;, &#39;o&#39;, &#39;A&#39;, &#39;O&#39;, &#39;O&#39;]</span>
</code></pre><p>You can also include ranges of letters or numbers by using a hyphen. For example, the character class <em>[a-zA-Z0-9]</em> will match all lowercase letters, uppercase letters, and numbers.</p><p>By placing a caret character (<code>^</code>) just after the character class\u2019s opening bracket, you can make a negative character class that will match all the characters that are not in the character class:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> consonant_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;[^aeiouAEIOU]&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> consonant_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&#39;Robocop eats baby food. BABY FOOD.&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># [&#39;R&#39;, &#39;b&#39;, &#39;c&#39;, &#39;p&#39;, &#39; &#39;, &#39;t&#39;, &#39;s&#39;, &#39; &#39;, &#39;b&#39;, &#39;b&#39;, &#39;y&#39;, &#39; &#39;, &#39;f&#39;, &#39;d&#39;, &#39;.&#39;, &#39;</span>
<span class="token comment"># &#39;, &#39;B&#39;, &#39;B&#39;, &#39;Y&#39;, &#39; &#39;, &#39;F&#39;, &#39;D&#39;, &#39;.&#39;]</span>
</code></pre><h2 id="the-caret-and-dollar-sign-characters" tabindex="-1">The Caret and Dollar sign characters</h2><ul><li><p>You can also use the caret symbol <code>^</code> at the start of a regex to indicate that a match must occur at the beginning of the searched text.</p></li><li><p>Likewise, you can put a dollar sign <code>$</code> at the end of the regex to indicate the string must end with this regex pattern.</p></li><li><p>And you can use the <code>^</code> and <code>$</code> together to indicate that the entire string must match the regex.</p></li></ul><p>The <code>r&#39;^Hello</code>\u2019 regular expression string matches strings that begin with \u2018Hello\u2019:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> begins_with_hello <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;^Hello&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> begins_with_hello<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># &lt;_sre.SRE_Match object; span=(0, 5), match=&#39;Hello&#39;&gt;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> begins_with_hello<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;He said hello.&#39;</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span>
<span class="token comment"># True</span>
</code></pre><p>The <code>r&#39;\\d\\$&#39;</code> regular expression string matches strings that end with a numeric character from 0 to 9:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;^\\d+$&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;1234567890&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># &lt;_sre.SRE_Match object; span=(0, 10), match=&#39;1234567890&#39;&gt;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;12345xyz67890&#39;</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span>
<span class="token comment"># True</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;12 34567890&#39;</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span>
<span class="token comment"># True</span>
</code></pre><h2 id="the-wildcard-character" tabindex="-1">The Wildcard character</h2><p>The <code>.</code> (or dot) character in a regular expression will match any character except for a newline:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> at_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;.at&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> at_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&#39;The cat in the hat sat on the flat mat.&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;cat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mat&#39;</span><span class="token punctuation">]</span>
</code></pre><h2 id="matching-everything-with-dot-star" tabindex="-1">Matching everything with Dot-Star</h2><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;First Name: (.*) Last Name: (.*)&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> name_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;First Name: Al Last Name: Sweigart&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;Al&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token string">&#39;Sweigart&#39;</span>
</code></pre><p>The <code>.*</code> uses greedy mode: It will always try to match as much text as possible. To match any and all text in a non-greedy fashion, use the dot, star, and question mark (<code>.*?</code>). The question mark tells Python to match in a non-greedy way:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> non_greedy_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;&lt;.*?&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> non_greedy_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;&lt;To serve man&gt; for dinner.&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;&lt;To serve man&gt;&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> greedy_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;&lt;.*&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> greedy_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;&lt;To serve man&gt; for dinner.&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;&lt;To serve man&gt; for dinner.&gt;&#39;</span>
</code></pre><h2 id="matching-newlines-with-the-dot-character" tabindex="-1">Matching newlines with the Dot character</h2><p>The dot-star will match everything except a newline. By passing <code>re.DOTALL</code> as the second argument to <code>re.compile()</code>, you can make the dot character match all characters, including the newline character:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no_newline_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&#39;.*&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no_newline_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;Serve the public trust.\\nProtect the innocent.\\nUphold the law.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;Serve the public trust.&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> newline_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&#39;.*&#39;</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> newline_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;Serve the public trust.\\nProtect the innocent.\\nUphold the law.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;Serve the public trust.\\nProtect the innocent.\\nUphold the law.&#39;</span>
</code></pre><h2 id="case-insensitive-matching" tabindex="-1">Case-Insensitive matching</h2><p>To make your regex case-insensitive, you can pass <code>re.IGNORECASE</code> or <code>re.I</code> as a second argument to <code>re.compile()</code>:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;robocop&#39;</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;Robocop is part man, part machine, all cop.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;Robocop&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;ROBOCOP protects the innocent.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;ROBOCOP&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;Al, why does your programming book talk about robocop so much?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;robocop&#39;</span>
</code></pre><h2 id="substituting-strings-with-the-sub-method" tabindex="-1">Substituting strings with the sub() method</h2><p>The <code>sub()</code> method for Regex objects is passed two arguments:</p><ol><li>The first argument is a string to replace any matches.</li><li>The second is the string for the regular expression.</li></ol><p>The <code>sub()</code> method returns a string with the substitutions applied:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;Agent \\w+&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names_regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">&#39;CENSORED&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Agent Alice gave the secret documents to Agent Bob.&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;CENSORED gave the secret documents to CENSORED.&#39;</span>
</code></pre><h2 id="managing-complex-regexes" tabindex="-1">Managing complex Regexes</h2><p>To tell the <code>re.compile()</code> function to ignore whitespace and comments inside the regular expression string, \u201Cverbose mode\u201D can be enabled by passing the variable <code>re.VERBOSE</code> as the second argument to <code>re.compile()</code>.</p><p>Now instead of a hard-to-read regular expression like this:</p><pre class="language-python"><code class="language-python">phone_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;((\\d{3}|\\(\\d{3}\\))?(\\s|-|\\.)?\\d{3}(\\s|-|\\.)\\d{4}(\\s*(ext|x|ext.)\\s*\\d{2,5})?)&#39;</span><span class="token punctuation">)</span>
</code></pre><p>you can spread the regular expression over multiple lines with comments like this:</p><pre class="language-python"><code class="language-python">phone_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">r&#39;&#39;&#39;(
    (\\d{3}|\\(\\d{3}\\))?            # area code
    (\\s|-|\\.)?                    # separator
    \\d{3}                         # first 3 digits
    (\\s|-|\\.)                     # separator
    \\d{4}                         # last 4 digits
    (\\s*(ext|x|ext.)\\s*\\d{2,5})?  # extension
    )&#39;&#39;&#39;</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>VERBOSE<span class="token punctuation">)</span>
</code></pre>`,72),A="Python Regular Expressions - Python Cheatsheet",R="A regular expression (shortened as regex) is a sequence of characters that specifies a search pattern in text and used by string-searching algorithms.",E=[{property:"og:title",content:"Python Regular Expressions - Python Cheatsheet"},{property:"og:description",content:"A regular expression (shortened as regex) is a sequence of characters that specifies a search pattern in text and used by string-searching algorithms."},{name:"description",content:"A regular expression (shortened as regex) is a sequence of characters that specifies a search pattern in text and used by string-searching algorithms."}],P={__name:"27-regular-expressions",setup(w,{expose:e}){const s={title:"Python Regular Expressions - Python Cheatsheet",description:"A regular expression (shortened as regex) is a sequence of characters that specifies a search pattern in text and used by string-searching algorithms.",meta:[{property:"og:title",content:"Python Regular Expressions - Python Cheatsheet"},{property:"og:description",content:"A regular expression (shortened as regex) is a sequence of characters that specifies a search pattern in text and used by string-searching algorithms."},{name:"description",content:"A regular expression (shortened as regex) is a sequence of characters that specifies a search pattern in text and used by string-searching algorithms."}]};return e({frontmatter:s}),g({title:"Python Regular Expressions - Python Cheatsheet",meta:[{property:"og:title",content:"Python Regular Expressions - Python Cheatsheet"},{property:"og:description",content:"A regular expression (shortened as regex) is a sequence of characters that specifies a search pattern in text and used by string-searching algorithms."},{name:"description",content:"A regular expression (shortened as regex) is a sequence of characters that specifies a search pattern in text and used by string-searching algorithms."}]}),(H,T)=>{const o=m,p=i,c=u,r=l;return k(),h("div",y,[n(o,{title:s.title,description:s.description},{default:a(()=>[t(" Regular Expressions ")]),_:1},8,["title","description"]),n(r,null,{default:a(()=>[n(p,null,{default:a(()=>[x]),_:1}),n(c,null,{default:a(()=>[t(' A regular expression (shortened as regex [...]) is a sequence of characters that specifies a search pattern in text. [...] used by string-searching algorithms for "find" or "find and replace" operations on strings, or for input validation. ')]),_:1})]),_:1}),_])}}};export{P as default,R as description,E as meta,A as title};
