import{_ as p,a as u,b as l}from"./BaseDisclaimerTitle.631caf82.js";import{q as _,o as h,c as y,b as n,f as t,t as d,B as k,s,e as f}from"./app.e6b4b7b5.js";const m={class:"markdown-body"},b=f("a",{target:"_blank",href:"https://docs.python.org/3/library/functions.html#aiter"},"Python 3 documentation",-1),g=d(`<h2 id="example" tabindex="-1">Example</h2><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">aitersync</span><span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">async</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> aiter<span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>
</code></pre>`,2),w="Python aiter() built-in function - Python Cheatsheet",C="Return an asynchronous iterator for an asynchronous iterable. Equivalent to calling x.__aiter__().",B=[{property:"og:title",content:"Python aiter() built-in function - Python Cheatsheet"},{property:"og:description",content:"Return an asynchronous iterator for an asynchronous iterable. Equivalent to calling x.__aiter__()."},{name:"description",content:"Return an asynchronous iterator for an asynchronous iterable. Equivalent to calling x.__aiter__()."}],N={__name:"2-aiter",setup(x,{expose:e}){const a={title:"Python aiter() built-in function - Python Cheatsheet",description:"Return an asynchronous iterator for an asynchronous iterable. Equivalent to calling x.__aiter__().",meta:[{property:"og:title",content:"Python aiter() built-in function - Python Cheatsheet"},{property:"og:description",content:"Return an asynchronous iterator for an asynchronous iterable. Equivalent to calling x.__aiter__()."},{name:"description",content:"Return an asynchronous iterator for an asynchronous iterable. Equivalent to calling x.__aiter__()."}]};return e({frontmatter:a}),_({title:"Python aiter() built-in function - Python Cheatsheet",meta:[{property:"og:title",content:"Python aiter() built-in function - Python Cheatsheet"},{property:"og:description",content:"Return an asynchronous iterator for an asynchronous iterable. Equivalent to calling x.__aiter__()."},{name:"description",content:"Return an asynchronous iterator for an asynchronous iterable. Equivalent to calling x.__aiter__()."}]}),(q,v)=>{const o=k,i=u,c=l,r=p;return h(),y("div",m,[n(o,{title:a.title,description:a.description},{default:t(()=>[s(" Python aiter() built-in function ")]),_:1},8,["title","description"]),n(r,null,{default:t(()=>[n(i,null,{default:t(()=>[s(" From the "),b]),_:1}),n(c,null,{default:t(()=>[s(" Return an asynchronous iterator for an asynchronous iterable. Equivalent to calling x.__aiter__(). aiter() is an async equivalent of iter() ")]),_:1})]),_:1}),g])}}};export{N as default,C as description,B as meta,w as title};
