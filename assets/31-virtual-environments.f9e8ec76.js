import{_ as h,a as u,b as y}from"./BaseDisclaimerTitle.631caf82.js";import{q as m,o as v,c as _,b as e,f as t,e as n,t as i,B as f,r as g,s as o}from"./app.e6b4b7b5.js";const w={class:"markdown-body"},b=i(`<p>The use of a Virtual Environment is to test python code in encapsulated environments, and to also avoid filling the base Python installation with libraries we might use for only one project.</p><h2 id="virtualenv" tabindex="-1">virtualenv</h2><ol><li><p>Install virtualenv</p><pre><code>pip install virtualenv
</code></pre></li><li><p>Install virtualenvwrapper-win (Windows)</p><pre><code>pip install virtualenvwrapper-win
</code></pre></li></ol><p>Usage:</p><ol><li><p>Make a Virtual Environment named <code>HelloWold</code></p><pre><code>mkvirtualenv HelloWold
</code></pre><p>Anything we install now will be specific to this project. And available to the projects we connect to this environment.</p></li><li><p>Set Project Directory</p><p>To bind our virtualenv with our current working directory we simply enter:</p><pre><code>setprojectdir .
</code></pre></li><li><p>Deactivate</p><p>To move onto something else in the command line type <code>deactivate</code> to deactivate your environment.</p><pre><code>deactivate
</code></pre><p>Notice how the parenthesis disappear.</p></li><li><p>Workon</p><p>Open up the command prompt and type <code>workon HelloWold</code> to activate the environment and move into your root project folder</p><pre><code>workon HelloWold
</code></pre></li></ol><h2 id="poetry" tabindex="-1">Poetry</h2>`,6),P=n("a",{href:"https://python-poetry.org/"},"Poetry website",-1),j=i(`<ol><li><p>Install Poetry</p><pre><code>pip install --user poetry
</code></pre></li><li><p>Create a new project</p><pre><code>poetry new my-project
</code></pre><p>This will create a my-project directory:</p><pre><code>my-project
\u251C\u2500\u2500 pyproject.toml
\u251C\u2500\u2500 README.rst
\u251C\u2500\u2500 poetry_demo
\u2502   \u2514\u2500\u2500 __init__.py
\u2514\u2500\u2500 tests
    \u251C\u2500\u2500 __init__.py
    \u2514\u2500\u2500 test_poetry_demo.py
</code></pre><p>The pyproject.toml file will orchestrate your project and its dependencies:</p><pre><code>[tool.poetry]
name = &quot;my-project&quot;
version = &quot;0.1.0&quot;
description = &quot;&quot;
authors = [&quot;your name &lt;your@mail.com&gt;&quot;]

[tool.poetry.dependencies]
python = &quot;*&quot;

[tool.poetry.dev-dependencies]
pytest = &quot;^3.4&quot;
</code></pre></li><li><p>Packages</p><p>To add dependencies to your project, you can specify them in the tool.poetry.dependencies section:</p><pre><code>[tool.poetry.dependencies]
pendulum = &quot;^1.4&quot;
</code></pre><p>Also, instead of modifying the pyproject.toml file by hand, you can use the add command and it will automatically find a suitable version constraint.</p><pre><code>$ poetry add pendulum
</code></pre><p>To install the dependencies listed in the pyproject.toml:</p><pre><code>poetry install
</code></pre><p>To remove dependencies:</p><pre><code>poetry remove pendulum
</code></pre></li></ol><p>For more information, check the <a href="https://poetry.eustace.io/docs/" target="_blank" rel="noopener">documentation</a> or read here:</p>`,2),k=n("h2",{id:"pipenv",tabindex:"-1"},"Pipenv",-1),V=n("a",{target:"_blank",href:"https://pipenv.pypa.io/en/latest/"},"Pipenv website",-1),E=i(`<ol><li><p>Install pipenv</p><pre><code>pip install pipenv
</code></pre></li><li><p>Enter your Project directory and install the Packages for your project</p><pre><code>cd my_project
pipenv install &lt;package&gt;
</code></pre><p>Pipenv will install your package and create a Pipfile for you in your project\u2019s directory. The Pipfile is used to track which dependencies your project needs in case you need to re-install them.</p></li><li><p>Uninstall Packages</p><pre><code>pipenv uninstall &lt;package&gt;
</code></pre></li><li><p>Activate the Virtual Environment associated with your Python project</p><pre><code>pipenv shell
</code></pre></li><li><p>Exit the Virtual Environment</p><pre><code>exit
</code></pre></li></ol><p>Find more information and a video in <a href="https://docs.pipenv.org/" target="_blank" rel="noopener">docs.pipenv.org</a>.</p><h2 id="anaconda" tabindex="-1">Anaconda</h2>`,3),T=n("a",{target:"k",href:"https://anaconda.com/"},"Anaconda",-1),q=i(`<p>Usage:</p><ol><li><p>Make a Virtual Environment</p><pre><code>conda create -n HelloWorld
</code></pre></li><li><p>To use the Virtual Environment, activate it by:</p><pre><code>conda activate HelloWorld
</code></pre><p>Anything installed now will be specific to the project HelloWorld</p></li><li><p>Exit the Virtual Environment</p><pre><code>conda deactivate
</code></pre></li></ol>`,2),N="Python Virtual environments - Python Cheatsheet",S="The use of a Virtual Environment is to test python code in encapsulated environments and to also avoid filling the base Python installation with libraries we might use for only one project.",B=[{property:"og:title",content:"Python Virtual environments - Python Cheatsheet"},{property:"og:description",content:"The use of a Virtual Environment is to test python code in encapsulated environments and to also avoid filling the base Python installation with libraries we might use for only one project."},{name:"description",content:"The use of a Virtual Environment is to test python code in encapsulated environments and to also avoid filling the base Python installation with libraries we might use for only one project."}],F={__name:"31-virtual-environments",setup(C,{expose:c}){const a={title:"Python Virtual environments - Python Cheatsheet",description:"The use of a Virtual Environment is to test python code in encapsulated environments and to also avoid filling the base Python installation with libraries we might use for only one project.",meta:[{property:"og:title",content:"Python Virtual environments - Python Cheatsheet"},{property:"og:description",content:"The use of a Virtual Environment is to test python code in encapsulated environments and to also avoid filling the base Python installation with libraries we might use for only one project."},{name:"description",content:"The use of a Virtual Environment is to test python code in encapsulated environments and to also avoid filling the base Python installation with libraries we might use for only one project."}]};return c({frontmatter:a}),m({title:"Python Virtual environments - Python Cheatsheet",meta:[{property:"og:title",content:"Python Virtual environments - Python Cheatsheet"},{property:"og:description",content:"The use of a Virtual Environment is to test python code in encapsulated environments and to also avoid filling the base Python installation with libraries we might use for only one project."},{name:"description",content:"The use of a Virtual Environment is to test python code in encapsulated environments and to also avoid filling the base Python installation with libraries we might use for only one project."}]}),(W,A)=>{const d=f,r=u,l=y,p=h,s=g("router-link");return v(),_("div",w,[e(d,{title:a.title,description:a.description},{default:t(()=>[o(" Virtual Environment ")]),_:1},8,["title","description"]),b,e(p,null,{default:t(()=>[e(r,null,{default:t(()=>[o(" From "),P]),_:1}),e(l,null,{default:t(()=>[o(" Poetry is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you. ")]),_:1})]),_:1}),j,n("ul",null,[n("li",null,[e(s,{to:"/blog/python-projects-with-poetry-and-vscode-part-1"},{default:t(()=>[o("Python projects with Poetry and VSCode. Part 1")]),_:1})]),n("li",null,[e(s,{to:"/blog/python-projects-with-poetry-and-vscode-part-2"},{default:t(()=>[o("Python projects with Poetry and VSCode. Part 2")]),_:1})]),n("li",null,[e(s,{to:"/blog/python-projects-with-poetry-and-vscode-part-3"},{default:t(()=>[o("Python projects with Poetry and VSCode. Part 3")]),_:1})])]),k,e(p,null,{default:t(()=>[e(r,null,{default:t(()=>[o(" From "),V]),_:1}),e(l,null,{default:t(()=>[o(" Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first-class citizen, in our world. ")]),_:1})]),_:1}),E,e(p,null,{default:t(()=>[e(r,null,{default:t(()=>[T,o(" is another popular tool to manage python packages. ")]),_:1}),e(l,null,{default:t(()=>[o(" Where packages, notebooks, projects and environments are shared. Your place for free public conda package hosting. ")]),_:1})]),_:1}),q])}}};export{F as default,S as description,B as meta,N as title};
