import{_ as m,a as h,b as y}from"./BaseDisclaimerTitle.631caf82.js";import{_ as u}from"./BlogTitleHeader.vue_vue_type_script_setup_true_lang.c6957e31.js";import{b as l}from"./route-block.6ee55eda.js";import{q as g,o as w,c as _,b as o,f as n,e,s as t,t as b,r as f}from"./app.e6b4b7b5.js";const P={class:"markdown-body"},k=e("p",null,"A Virtual Environment is an isolated Python installation designed to avoid filling our base one with libraries we might use for only one project. It also allows us to manage multiple versions of the same package in different projects. We could, for example, need Django 4.1 for one and 1.9 for the other.",-1),v=e("a",{target:"_blank",href:"https://www.python.org/dev/peps/pep-0518/"},"standardized",-1),j=e("code",null,"pyproject.toml",-1),V=e("code",null,"pyproject.toml",-1),C=e("code",null,"setup.py",-1),I=e("code",null,"requirements.txt",-1),q=e("code",null,"setup.cfg",-1),E=e("code",null,"MANIFEST.in",-1),S=e("code",null,"Pipfile",-1),x=e("p",null,[t("In this series of articles, we\u2019ll use "),e("a",{href:"https://poetry.eustace.io/",target:"_blank",rel:"noopener"},"Poetry"),t(" to manage our dependencies, build a simple project and, with a single command, publish it on "),e("a",{href:"https://pypi.org/",target:"_blank",rel:"noopener"},"PyPI"),t(".")],-1),A=e("p",null,"In this first part, we will:",-1),W=e("ul",null,[e("li",null,"Start a new project."),e("li",null,"Create a Virtual Environment."),e("li",null,"Manage dependencies.")],-1),T=e("ul",null,[e("li",null,[t("Add our virtual Environment to "),e("a",{href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener"},"VSCode"),t(".")]),e("li",null,[t("Integrate our dev dependencies: "),e("ul",null,[e("li",null,[e("em",null,"Flake8")]),e("li",null,[e("em",null,"Black")]),e("li",null,[e("em",null,"Pytest")])])])],-1),B=b(`<ul><li>Write a sample library.</li><li>Build our project with <em>Poetry</em>.</li><li>Publish it on <em>PyPI</em>.</li></ul><h2 id="installing-poetry" tabindex="-1">Installing Poetry</h2><p>The easiest way is to use <em>pip</em>:</p><pre><code>$ pip install poetry
</code></pre><p>But we will use Poetry own installer to isolate it from the rest of the system by vendorizing its dependencies. This is the recommended way of installing poetry:</p><pre><code>$ curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
</code></pre><p>This way, we will later be able to update poetry to the latest stable version with the <code>poetry self update</code> command.</p><h2 id="starting-a-new-project" tabindex="-1">Starting a new project</h2><p>We can now start a new Python project by using the <code>poetry new [project_name]</code> command. I will call it <strong><em>how-long</em></strong> and will be a simple library to measure the execution time of a function:</p><pre><code>$ poetry new how-long
</code></pre><blockquote><p>Note: For existing projects, you can use the <code>poetry init</code> command and interactively create a <em>pyproject.toml</em>.</p></blockquote><p>The directory <em>how-long</em> is created and inside is a basic project structure:</p><pre><code>how-long
\u251C\u2500\u2500 README.rst
\u251C\u2500\u2500 how_long
\u2502   \u2514\u2500\u2500 __init__.py
\u251C\u2500\u2500 pyproject.toml
\u2514\u2500\u2500 tests
    \u251C\u2500\u2500 __init__.py
    \u2514\u2500\u2500 test_how_long.py
</code></pre><blockquote><p>Note: To be able to publish your project, you need an available name. Use the <a href="https://pypi.org/" target="_blank" rel="noopener">PyPI</a> search for this.</p></blockquote><h3 id="the-pyprojecttoml-file" tabindex="-1">The pyproject.toml file</h3><p>The <strong>pyproject.toml</strong> file will manage the details and dependencies of the project:</p><pre><code>[tool.poetry]
name = &quot;how-long&quot;
version = &quot;0.1.0&quot;
description = &quot;A simple decorator to measure a function execution time.&quot;
authors = [&quot;wilfredinni &lt;carlos.w.montecinos@gmail.com&gt;&quot;]

[tool.poetry.dependencies]
python = &quot;^3.7&quot;

[tool.poetry.dev-dependencies]
pytest = &quot;^3.0&quot;

[build-system]
requires = [&quot;poetry&gt;=0.12&quot;]
build-backend = &quot;poetry.masonry.api&quot;
</code></pre><h4 id="toolpoetry" tabindex="-1">[tool.poetry]</h4><p>The details. Adding a <a href="https://poetry.eustace.io/docs/pyproject/#license" target="_blank" rel="noopener">license</a> and a <a href="https://poetry.eustace.io/docs/pyproject/#readme" target="_blank" rel="noopener">README</a> might be a good idea:</p><pre><code>[tool.poetry]
...
license = &quot;MIT&quot;
readme = &quot;README.rst&quot;
</code></pre><h4 id="toolpoetrydependencies" tabindex="-1">[tool.poetry.dependencies]</h4><p>First is the Python version. Basically, this project will be compatible with Python 3.7 and up. Furthermore, from now on, every package we install that is meant to be used in production will be listed here.</p><h4 id="toolpoetrydev-dependencies" tabindex="-1">[tool.poetry.dev-dependencies]</h4><p>These packages are only for development and will not be included when we publish our project. By default, Poetry includes <a href="https://docs.pytest.org/en/latest/" target="_blank" rel="noopener">Pytest</a>, so we will use it to test our project later on.</p><h2 id="creating-a-virtual-environment" tabindex="-1">Creating a Virtual Environment</h2><p>To create a Virtual Environment and install <em>Pytest</em>, we will use the <code>poetry install</code> command:</p><pre><code>$ poetry install
</code></pre><p><img src="https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p1/poetry-install.png" alt="poetry-install-command"></p><p>After is done, a new file, <code>poetry.lock</code> will be created.</p><blockquote><p>When Poetry has finished installing, it writes all the packages and the exact versions of them that it downloaded to the poetry.lock file, locking the project to those specific versions. You should commit the poetry.lock file to your project repo so that all people working on the project are locked to the same versions of dependencies.</p></blockquote><h2 id="dependency-management" tabindex="-1">Dependency management</h2><p>One way to add or remove dependencies is to directly edit <em>pyproject.toml</em> and then run <code>poetry install</code> to apply the changes. We will instead use the <code>add</code> and <code>remove</code> commands to avoid manual modifications.</p><h3 id="adding-dependencies" tabindex="-1">Adding dependencies</h3><p>Let\u2019s add two packages to the project, <em>pendulum</em>, and <em>coo</em>:</p><pre><code>$ poetry add pendulum coo
</code></pre><p><img src="https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p1/poetry-add.png" alt="poetry-add-command"></p><p>Open <em>pyproject.toml</em> and <em>poetry.lock</em> and see how they have updated.</p><h3 id="adding-dev-dependencies" tabindex="-1">Adding Dev dependencies</h3><p>These dependencies will be available only during development, Poetry will not include them when building and publishing the project.</p><p>We already installed <em>Pytest</em>, but we will also use <a href="http://flake8.pycqa.org/en/latest/" target="_blank" rel="noopener">flake8</a> for linting and <a href="http://mypy-lang.org/" target="_blank" rel="noopener">mypy</a> for static typing:</p><pre><code>$ poetry add -D flake8 mypy
</code></pre><p>Now that I think about it, I forgot to add a formatter. We\u2019ll go with <a href="https://black.readthedocs.io/en/stable/" target="_blank" rel="noopener">black</a>:</p><pre><code>$ poetry add -D black
[ValueError]
Could not find a matching version of package black

add [-D|--dev] [--git GIT] [--path PATH] [-E|--extras EXTRAS] [--optional] [--python PYTHON] [--platform PLATFORM] [--allow-prereleases] [--dry-run] [--] &lt;name&gt; (&lt;name&gt;)...
</code></pre><p>This error happens because <em>black</em> is in a pre-release state, so Poetry cannot find any stable version for us. But I really want it, so let\u2019s install it anyway with the <code>--allow-prereleases</code> flag:</p><pre><code>$ poetry add -D black --allow-prereleases
</code></pre><p><img src="https://raw.githubusercontent.com/wilfredinni/pysheetComments/master/2019/April/poetry_vscode_p1/poetry-add-dev.png" alt="poetry-add-dev-command"></p><h3 id="removing-dependencies" tabindex="-1">Removing dependencies</h3><p>You know what, I changed my mind, this project will use nor <em>coo</em> nor <em>mypy</em>. Start by removing <em>coo</em>, a normal dependency of our project:</p><pre><code>$ poetry remove coo
</code></pre><p>Now <em>mypy</em> which is a dev dependency:</p><pre><code>$ poetry remove -D mypy
</code></pre><h2 id="conclusion" tabindex="-1">Conclusion</h2><p>In this first part, we have started a new project, created a Virtual Environment and added and removed dependencies by using the following commands:</p><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>poetry new [package-name]</code></td><td>Start a new Python Project.</td></tr><tr><td><code>poetry init</code></td><td>Create a <em>pyproject.toml</em> file interactively.</td></tr><tr><td><code>poetry install</code></td><td>Install the packages inside the <em>pyproject.toml</em> file.</td></tr><tr><td><code>poetry add [package-name]</code></td><td>Add a package to a Virtual Environment.</td></tr><tr><td><code>poetry add -D [package-name]</code></td><td>Add a dev package to a Virtual Environment.</td></tr><tr><td><code>poetry remove [package-name]</code></td><td>Remove a package from a Virtual Environment.</td></tr><tr><td><code>poetry remove -D [package-name]</code></td><td>Remove a dev package from a Virtual Environment.</td></tr><tr><td><code>poetry self:update</code></td><td>Update poetry to the latest stable version.</td></tr></tbody></table>`,54),F=e("em",null,"Poetry",-1),D=e("em",null,"VSCode",-1),$=e("em",null,"PyPI",-1),N=e("p",null,"Any doubt or suggestion? Please leave a comment.",-1),G="Python projects with Poetry and VSCode Part 1 - Python Cheatsheet",X="We'll use Poetry to start a simple project, manage dependencies and publish it on PyPI. We'll also integrate Pytest, Black, and Flake8 into VSCode directly from a Virtual Environment.",K="April 12, 2019",Q="July 3, 2022",Z="python, intermediate, vscode, packaging",ee=[{property:"og:title",content:"Python projects with Poetry and VSCode Part 1 - Python Cheatsheet"},{property:"og:description",content:"We'll use Poetry to start a simple project, manage dependencies and publish it on PyPI. We'll also integrate Pytest, Black, and Flake8 into VSCode directly from a Virtual Environment."},{name:"description",content:"We'll use Poetry to start a simple project, manage dependencies and publish it on PyPI. We'll also integrate Pytest, Black, and Flake8 into VSCode directly from a Virtual Environment."}],R={__name:"python-projects-with-poetry-and-vscode-part-1",setup(M,{expose:i}){const r={title:"Python projects with Poetry and VSCode Part 1 - Python Cheatsheet",description:"We'll use Poetry to start a simple project, manage dependencies and publish it on PyPI. We'll also integrate Pytest, Black, and Flake8 into VSCode directly from a Virtual Environment.",date:"April 12, 2019",updated:"July 3, 2022",tags:"python, intermediate, vscode, packaging",meta:[{property:"og:title",content:"Python projects with Poetry and VSCode Part 1 - Python Cheatsheet"},{property:"og:description",content:"We'll use Poetry to start a simple project, manage dependencies and publish it on PyPI. We'll also integrate Pytest, Black, and Flake8 into VSCode directly from a Virtual Environment."},{name:"description",content:"We'll use Poetry to start a simple project, manage dependencies and publish it on PyPI. We'll also integrate Pytest, Black, and Flake8 into VSCode directly from a Virtual Environment."}]};return i({frontmatter:r}),g({title:"Python projects with Poetry and VSCode Part 1 - Python Cheatsheet",meta:[{property:"og:title",content:"Python projects with Poetry and VSCode Part 1 - Python Cheatsheet"},{property:"og:description",content:"We'll use Poetry to start a simple project, manage dependencies and publish it on PyPI. We'll also integrate Pytest, Black, and Flake8 into VSCode directly from a Virtual Environment."},{name:"description",content:"We'll use Poetry to start a simple project, manage dependencies and publish it on PyPI. We'll also integrate Pytest, Black, and Flake8 into VSCode directly from a Virtual Environment."}]}),(H,L)=>{const d=u,p=h,s=y,c=m,a=f("router-link");return w(),_("div",P,[o(d,{frontmatter:r,title:"Python projects with Poetry and VSCode Part 1"}),k,o(c,null,{default:n(()=>[o(p,null,{default:n(()=>[t(" Python Poetry ")]),_:1}),o(s,null,{default:n(()=>[t(" Poetry is a tool to handle dependency installation as well as building and packaging of Python packages. It only needs one file to do all of that: the new, "),v,t(),j,t("`. In other words, poetry uses "),V,t(" to replace "),C,t(", "),I,t(", "),q,t(", "),E,t(" and the newly added "),S,t(". ")]),_:1})]),_:1}),x,A,W,e("p",null,[t("In the "),o(a,{to:"/blog/python-projects-with-poetry-and-vscode-part-2"},{default:n(()=>[t("second article")]),_:1}),t(", we\u2019ll:")]),T,e("p",null,[t("And finally, in a "),o(a,{to:"/blog/python-projects-with-poetry-and-vscode-part-3"},{default:n(()=>[t("third article")]),_:1}),t(" we\u2019ll:")]),B,e("p",null,[t("In a "),o(a,{to:"/blog/python-projects-with-poetry-and-vscode-part-2"},{default:n(()=>[t("second article")]),_:1}),t(", we will see more "),F,t(" commands, add our Virtual Environment to "),D,t(" and use the dev packages we installed to lint (Flake8), format (Black) and test (Pytest) our code inside the editor. Finally, in a third one, we will write and publish a sample library to "),$,t(".")]),N])}}};typeof l=="function"&&l(R);export{K as date,R as default,X as description,ee as meta,Z as tags,G as title,Q as updated};
