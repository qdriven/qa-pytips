import{_ as i}from"./BlogTitleHeader.vue_vue_type_script_setup_true_lang.c6957e31.js";import{b as o}from"./route-block.6ee55eda.js";import{q as k,o as u,c as h,b as s,e as p,s as n,f as e,t as c,r as g}from"./app.e6b4b7b5.js";const d={class:"markdown-body"},m=c(`<p><em>List Comprehensions</em> are a special kind of syntax that let us create lists out of other lists (<a href="https://en.wikipedia.org/wiki/List_comprehension" target="_blank" rel="noopener">Wikipedia</a>, <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" target="_blank" rel="noopener">The Python Tutorial</a>). They are incredibly useful when dealing with numbers and with one or two levels of nested <em>for loops</em>, but beyond that, they can become a little too hard to read.</p><p>In this article, we are going to make some <em>For Loops</em> and rewrite them, step by step, into <em>Comprehensions</em>.</p><h2 id="basics" tabindex="-1">Basics</h2><p>The truth is, <em>List Comprehensions</em> are not too complex, but they are still a bit difficult to understand at first because they look a <em>little</em> weird. Why? Well, the order in which they are written is the <strong><em>opposite</em></strong> of what we usually see in a <em>For Loop</em>.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Charles&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Susan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Patrick&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;George&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Carol&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> names<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token comment"># Charles</span>
<span class="token comment"># Susan</span>
<span class="token comment"># Patrick</span>
<span class="token comment"># George</span>
<span class="token comment"># Carol</span>
</code></pre><p>To do the same with a <em>List Comprehension</em>, we start at the very end of the <em>loop</em>:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Charles&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Susan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Patrick&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;George&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Carol&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> names<span class="token punctuation">]</span>
<span class="token comment"># Charles</span>
<span class="token comment"># Susan</span>
<span class="token comment"># Patrick</span>
<span class="token comment"># George</span>
<span class="token comment"># Carol</span>
</code></pre><p>Notice how we inverted the order:</p><ul><li>First, we have what the output of the loop will be <code>[print(n) ...]</code>.</li><li>Then we define the variable that will store each of the items and point at the <code>List</code>, <code>Set</code> or <code>Dictionary</code> we will work on <code>[... for n in names]</code>.</li></ul><h2 id="creating-a-new-list-with-a-comprehension" tabindex="-1">Creating a new List with a Comprehension</h2><blockquote><p>This is the primary use of a <em>List Comprehension</em>. Other usages may result in a hard-to-read code for you and others.</p></blockquote><p>This is how we create a new list from an existing collection with a <em>For Loop</em>:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Charles&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Susan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Patrick&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;George&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Carol&#39;</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> new_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> names<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     new_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>new_list<span class="token punctuation">)</span>
<span class="token comment"># [&#39;Charles&#39;, &#39;Susan&#39;, &#39;Patrick&#39;, &#39;George&#39;, &#39;Carol&#39;]</span>
</code></pre><p>And this is how we do the same with a <em>List Comprehension</em>:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Charles&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Susan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Patrick&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;George&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Carol&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> new_list <span class="token operator">=</span> <span class="token punctuation">[</span>n <span class="token keyword">for</span> n <span class="token keyword">in</span> names<span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>new_list<span class="token punctuation">)</span>
<span class="token comment"># [&#39;Charles&#39;, &#39;Susan&#39;, &#39;Patrick&#39;, &#39;George&#39;, &#39;Carol&#39;]</span>
</code></pre><p>The reason we can do this is that a <em>List Comprehension</em> standard behavior is to return a list:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Charles&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Susan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Patrick&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;George&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Carol&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>n <span class="token keyword">for</span> n <span class="token keyword">in</span> names<span class="token punctuation">]</span>
<span class="token comment"># [&#39;Charles&#39;, &#39;Susan&#39;, &#39;Patrick&#39;, &#39;George&#39;, &#39;Carol&#39;]</span>
</code></pre><h2 id="adding-conditionals" tabindex="-1">Adding Conditionals</h2><p>What if we want <code>new_list</code> to have only the names that start with <code>C</code>? With a <em>For Loop</em>, we would do it like this:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Charles&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Susan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Patrick&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;George&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Carol&#39;</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> new_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> names<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> n<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         new_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>new_list<span class="token punctuation">)</span>
<span class="token comment"># [&#39;Charles&#39;, &#39;Carol&#39;]</span>
</code></pre><p>In a <em>List Comprehension</em>, we add the if statement at its end:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Charles&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Susan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Patrick&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;George&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Carol&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> new_list <span class="token operator">=</span> <span class="token punctuation">[</span>n <span class="token keyword">for</span> n <span class="token keyword">in</span> names <span class="token keyword">if</span> n<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>new_list<span class="token punctuation">)</span>
<span class="token comment"># [&#39;Charles&#39;, &#39;Carol&#39;]</span>
</code></pre><p>A lot more readable.</p><h2 id="formatting-long-list-comprehensions" tabindex="-1">Formatting long List Comprehensions</h2><p>This time, we want <code>new_list</code> to have not only the names that start with a <code>C</code> but also those that end with an <code>e</code> and contain a <code>k</code>:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Charles&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Susan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Patrick&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;George&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Carol&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> new_list <span class="token operator">=</span> <span class="token punctuation">[</span>n <span class="token keyword">for</span> n <span class="token keyword">in</span> names <span class="token keyword">if</span> n<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span> <span class="token keyword">or</span> n<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">&#39;k&#39;</span> <span class="token keyword">in</span> n<span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>new_list<span class="token punctuation">)</span>
<span class="token comment"># [&#39;Charles&#39;, &#39;Patrick&#39;, &#39;George&#39;, &#39;Carol&#39;]</span>
</code></pre><p>That is quite messy. Fortunately, it is possible to break <em>Comprehensions</em> in different lines:</p><pre class="language-python"><code class="language-python">new_list <span class="token operator">=</span> <span class="token punctuation">[</span>
    n
    <span class="token keyword">for</span> n <span class="token keyword">in</span> names
    <span class="token keyword">if</span> n<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">or</span> n<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">or</span> <span class="token string">&quot;k&quot;</span> <span class="token keyword">in</span> n
<span class="token punctuation">]</span>
</code></pre><h2 id="set-and-dict-comprehensions" tabindex="-1">Set and Dict Comprehensions</h2>`,29),w=p("em",null,"List Comprehensions",-1),y=c(`<h3 id="set-comprehension" tabindex="-1">Set comprehension</h3><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> my_set <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;def&quot;</span><span class="token punctuation">}</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Here, we create a new set with uppercase elements with a for loop</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> new_set <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> my_set<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    new_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>new_set<span class="token punctuation">)</span>
<span class="token comment"># {&#39;DEF&#39;, &#39;ABC&#39;}</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># The same, but with a set comprehension</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> new_set <span class="token operator">=</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> my_set<span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>new_set<span class="token punctuation">)</span>
<span class="token comment"># {&#39;DEF&#39;, &#39;ABC&#39;}</span>
</code></pre><h3 id="dict-comprehension" tabindex="-1">Dict comprehension</h3><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> my_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Christine&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">98</span><span class="token punctuation">}</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># A new dictionary out of an existing one with a for loop</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> new_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> my_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     new_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>new_dict<span class="token punctuation">)</span>
<span class="token comment"># {&#39;name&#39;: &#39;Christine&#39;, &#39;age&#39;: 98}</span>

<span class="token comment"># Using a dict comprehension</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> new_dict <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span> value <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> my_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment"># Notice the &quot;:&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>new_dict<span class="token punctuation">)</span>
<span class="token comment"># {&#39;name&#39;: &#39;Christine&#39;, &#39;age&#39;: 98}</span>
</code></pre><blockquote><p>Recommended Article: <a href="https://www.pythoncheatsheet.org/blog/python-sets-what-why-how" target="_blank" rel="noopener">Python Sets: What, Why and How </a>.</p></blockquote><h2 id="conclusion" tabindex="-1">Conclusion</h2><p>Every time I learn something new, there is this urge to use it right away. When that happens, I force myself to stop and think for a moment\u2026 Should I change this big, nested and already messy looking <em>For Loop</em> to a <em>List Comprehension</em>? Probably not.</p><blockquote><p>Readability counts. <a href="https://www.python.org/dev/peps/pep-0020/" target="_blank" rel="noopener">The Zen of Python</a>.</p></blockquote>`,8),L="Python Comprehensions: A step by step Introduction - Python Cheatsheet",v="In this short article, we are going to make some for loops and rewrite them, step by step, into comprehensions.",x="March 22, 2019",A="July 3, 2022",G="python, basics",T=[{property:"og:title",content:"Python Comprehensions: A step by step Introduction - Python Cheatsheet"},{property:"og:description",content:"In this short article, we are going to make some for loops and rewrite them, step by step, into comprehensions."},{name:"description",content:"In this short article, we are going to make some for loops and rewrite them, step by step, into comprehensions."}],C={__name:"python-comprehensions-step-by-step",setup(f,{expose:r}){const a={title:"Python Comprehensions: A step by step Introduction - Python Cheatsheet",description:"In this short article, we are going to make some for loops and rewrite them, step by step, into comprehensions.",date:"March 22, 2019",updated:"July 3, 2022",tags:"python, basics",meta:[{property:"og:title",content:"Python Comprehensions: A step by step Introduction - Python Cheatsheet"},{property:"og:description",content:"In this short article, we are going to make some for loops and rewrite them, step by step, into comprehensions."},{name:"description",content:"In this short article, we are going to make some for loops and rewrite them, step by step, into comprehensions."}]};return r({frontmatter:a}),k({title:"Python Comprehensions: A step by step Introduction - Python Cheatsheet",meta:[{property:"og:title",content:"Python Comprehensions: A step by step Introduction - Python Cheatsheet"},{property:"og:description",content:"In this short article, we are going to make some for loops and rewrite them, step by step, into comprehensions."},{name:"description",content:"In this short article, we are going to make some for loops and rewrite them, step by step, into comprehensions."}]}),(_,P)=>{const l=i,t=g("router-link");return u(),h("div",d,[s(l,{frontmatter:a,title:"Python Comprehensions: A step by step Introduction"}),m,p("p",null,[n("If you learned the basics of "),w,n("\u2026 Congratulations! You just did it with "),s(t,{to:"/cheatsheet/sets"},{default:e(()=>[n("Sets")]),_:1}),n(" and "),s(t,{to:"/cheatsheet/dictionaries"},{default:e(()=>[n("Dictionaries")]),_:1}),n(".")]),y])}}};typeof o=="function"&&o(C);export{x as date,C as default,v as description,T as meta,G as tags,L as title,A as updated};
