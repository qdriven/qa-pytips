import{_ as l,a as k,b as g}from"./BaseWarningTitle.f5a386c9.js";import{_ as h}from"./BlogTitleHeader.vue_vue_type_script_setup_true_lang.c6957e31.js";import{b as e}from"./route-block.6ee55eda.js";import{q as d,o as y,c as w,b as n,f as a,t as o,s,e as m}from"./app.e6b4b7b5.js";const f={class:"markdown-body"},_=o(`<p>I do not know about you, but every time I saw some function with <code>*args</code> and <code>**kwargs</code> as parameters, I\u2019d get a little scared. I\u2019ve even \u201Cused\u201D them while doing some backend work with Django without understanding a thing. If you\u2019re a self-taught developer like me, I know you\u2019ve been there too.</p><p>A few months ago, I decided to stop being lazy and started to research it. To my surprise, they were easy to grasp when playing with the interpreter, but not so much when reading about them. I wrote this post trying to explain <a href="https://www.pythoncheatsheet.org/#args-and-kwargs" target="_blank" rel="noopener">args and kwargs</a> the way I would have liked someone explained them to me.</p><h2 id="basics" tabindex="-1">Basics</h2><p>The first thing you need to know is that <code>*args</code> and <code>**kwargs</code> lets you pass an undefined number of <code>arguments</code> and <code>keywords</code> when calling a <a href="https://www.pythoncheatsheet.org/#Functions" target="_blank" rel="noopener">function</a>:</p><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">some_function</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token comment"># call some_function with any number of arguments</span>
some_function<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">)</span>

<span class="token comment"># call some_function with any number of keywords</span>
some_function<span class="token punctuation">(</span>key1<span class="token operator">=</span>arg1<span class="token punctuation">,</span> key2<span class="token operator">=</span>arg2<span class="token punctuation">,</span> key3<span class="token operator">=</span>arg3<span class="token punctuation">)</span>

<span class="token comment"># call both, arguments and keywords</span>
some_function<span class="token punctuation">(</span>arg<span class="token punctuation">,</span> key1<span class="token operator">=</span>arg1<span class="token punctuation">)</span>

<span class="token comment"># or none</span>
some_function<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p>Second, the words <code>args</code> and <code>kwargs</code> are conventions. This means they are not imposed by the interpreter, but considered good practice among the Python community:</p><pre class="language-python"><code class="language-python"><span class="token comment"># This function would work just fine</span>
<span class="token keyword">def</span> <span class="token function">some_function</span><span class="token punctuation">(</span><span class="token operator">*</span>arguments<span class="token punctuation">,</span> <span class="token operator">**</span>keywords<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre>`,7),b=m("a",{target:"_blank",href:"https://www.python.org/dev/peps/pep-0008/"},"PEP 8 -- Style Guide for Python Code",-1),v=o(`<p>So, how does Python know that we want our function to accept multiple arguments and keywords? Yes, the answers are the <code>*</code> and <code>**</code> operators.</p><p>Now that we have covered the basics, let\u2019s work with them \u{1F44A}.</p><h2 id="args" tabindex="-1">args</h2><p>We now know how to pass multiple arguments using <code>*args</code> as a parameter to our functions, but how do we work with them? It\u2019s easy: all the arguments are within the <code>args</code> variable as a <a href="https://www.pythoncheatsheet.org/#Tuple-Data-Type" target="_blank" rel="noopener">tuple</a>:</p><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">some_function</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;Arguments passed: </span><span class="token interpolation"><span class="token punctuation">{</span>args<span class="token punctuation">}</span></span><span class="token string"> as </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">type</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>


some_function<span class="token punctuation">(</span><span class="token string">&#39;arg1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;arg2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;arg3&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># Arguments passed: (&#39;arg1&#39;, &#39;arg2&#39;, &#39;arg3&#39;) as &lt;class &#39;tuple&#39;&gt;</span>
</code></pre><p>We can iterate over them:</p><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">some_function</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> a <span class="token keyword">in</span> args<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>


some_function<span class="token punctuation">(</span><span class="token string">&#39;arg1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;arg2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;arg3&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># arg1</span>
<span class="token comment"># arg2</span>
<span class="token comment"># arg3</span>
</code></pre><p>Access the elements with an index:</p><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">some_function</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>


some_function<span class="token punctuation">(</span><span class="token string">&#39;arg1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;arg2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;arg3&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># arg2</span>
</code></pre><p>Slice:</p><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">some_function</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>


some_function<span class="token punctuation">(</span><span class="token string">&#39;arg1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;arg2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;arg3&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># (&#39;arg1&#39;, &#39;arg2&#39;)</span>
</code></pre><p>Whatever you do with a <a href="https://www.pythoncheatsheet.org/#Tuple-Data-Type" target="_blank" rel="noopener">tuple</a>, you can do it with <code>args</code>.</p><h2 id="kwargs" tabindex="-1">kwargs</h2><p>While arguments are in the args variable, keywords are within <code>kwargs</code>, but this time as a <a href="https://www.pythoncheatsheet.org/#Dictionaries-and-Structuring-Data" target="_blank" rel="noopener">dictionary</a> where the key is the keyword:</p><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">some_function</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;keywords: </span><span class="token interpolation"><span class="token punctuation">{</span>kwargs<span class="token punctuation">}</span></span><span class="token string"> as </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">type</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>


some_function<span class="token punctuation">(</span>key1<span class="token operator">=</span><span class="token string">&#39;arg1&#39;</span><span class="token punctuation">,</span> key2<span class="token operator">=</span><span class="token string">&#39;arg2&#39;</span><span class="token punctuation">,</span> key3<span class="token operator">=</span><span class="token string">&#39;arg3&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># keywords: {&#39;key1&#39;: &#39;arg1&#39;, &#39;key2&#39;: &#39;arg2&#39;, &#39;key3&#39;: &#39;arg3&#39;} as &lt;class &#39;dict&#39;&gt;</span>
</code></pre><p>Again, we can do with <code>kwargs</code> the same we would do with any <a href="https://www.pythoncheatsheet.org/#Dictionaries-and-Structuring-Data" target="_blank" rel="noopener">dictionary</a>.</p><p>Iterate over:</p><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">some_function</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>


some_function<span class="token punctuation">(</span>key1<span class="token operator">=</span><span class="token string">&#39;arg1&#39;</span><span class="token punctuation">,</span> key2<span class="token operator">=</span><span class="token string">&#39;arg2&#39;</span><span class="token punctuation">,</span> key3<span class="token operator">=</span><span class="token string">&#39;arg3&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># key1: arg1</span>
<span class="token comment"># key2: arg2</span>
<span class="token comment"># key3: arg3</span>
</code></pre><p>Use the <code>get()</code> method:</p><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">some_function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>


some_function<span class="token punctuation">(</span><span class="token string">&#39;key3&#39;</span><span class="token punctuation">,</span> key1<span class="token operator">=</span><span class="token string">&#39;arg1&#39;</span><span class="token punctuation">,</span> key2<span class="token operator">=</span><span class="token string">&#39;arg2&#39;</span><span class="token punctuation">,</span> key3<span class="token operator">=</span><span class="token string">&#39;arg3&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># arg3</span>
</code></pre><p>And a lot <a href="https://www.pythoncheatsheet.org/#Dictionaries-and-Structuring-Data" target="_blank" rel="noopener">more</a> =).</p><h2 id="conclusion" tabindex="-1">Conclusion</h2><p><code>*args</code> and <code>**kwargs</code> may seem scary, but the truth is that they are not that difficult to grasp and have the power to grant your functions with lots of flexibility. If you know about <a href="https://www.pythoncheatsheet.org/#Tuple-Data-Type" target="_blank" rel="noopener">tuples</a> and <a href="https://www.pythoncheatsheet.org/#Dictionaries-and-Structuring-Data" target="_blank" rel="noopener">dictionaries</a>, you are ready to go.</p><p>Want to play with args and kwargs? <a href="https://mybinder.org/v2/gh/wilfredinni/python-cheatsheet/master?filepath=jupyter_notebooks" target="_blank" rel="noopener">This</a> is an online Jupyter Notebook for you to try.</p><p>Some examples make use of <code>f-strings</code>, a relatively new way to format strings in Python 3.6+. <a href="https://www.pythoncheatsheet.org/#Formatted-String-Literals-or-f-strings" target="_blank" rel="noopener">Here</a> you can read more about it.</p>`,25),A="Python *args and **kwargs Made Easy - Python Cheatsheet",N="args and kwargs may seem scary, but the truth is that they are not that difficult to grasp and have the power to grant your functions with lots of flexibility.",W="March 08, 2019",j="July 1, 2022",B="python, intermediate",V=[{property:"og:title",content:"Python *args and **kwargs Made Easy - Python Cheatsheet"},{property:"og:description",content:"args and kwargs may seem scary, but the truth is that they are not that difficult to grasp and have the power to grant your functions with lots of flexibility."},{name:"description",content:"args and kwargs may seem scary, but the truth is that they are not that difficult to grasp and have the power to grant your functions with lots of flexibility."}],x={__name:"python-easy-args-kwargs",setup(P,{expose:p}){const t={title:"Python *args and **kwargs Made Easy - Python Cheatsheet",description:"args and kwargs may seem scary, but the truth is that they are not that difficult to grasp and have the power to grant your functions with lots of flexibility.",date:"March 08, 2019",updated:"July 1, 2022",tags:"python, intermediate",meta:[{property:"og:title",content:"Python *args and **kwargs Made Easy - Python Cheatsheet"},{property:"og:description",content:"args and kwargs may seem scary, but the truth is that they are not that difficult to grasp and have the power to grant your functions with lots of flexibility."},{name:"description",content:"args and kwargs may seem scary, but the truth is that they are not that difficult to grasp and have the power to grant your functions with lots of flexibility."}]};return p({frontmatter:t}),d({title:"Python *args and **kwargs Made Easy - Python Cheatsheet",meta:[{property:"og:title",content:"Python *args and **kwargs Made Easy - Python Cheatsheet"},{property:"og:description",content:"args and kwargs may seem scary, but the truth is that they are not that difficult to grasp and have the power to grant your functions with lots of flexibility."},{name:"description",content:"args and kwargs may seem scary, but the truth is that they are not that difficult to grasp and have the power to grant your functions with lots of flexibility."}]}),(I,T)=>{const c=h,r=k,i=g,u=l;return y(),w("div",f,[n(c,{frontmatter:t,title:"Python *args and **kwargs Made Easy"}),_,n(u,null,{default:a(()=>[n(r,null,{default:a(()=>[s(" A note about conventions ")]),_:1}),n(i,null,{default:a(()=>[s(" Even if the above function works, don't do it. Conventions are there to help you write readable code for you and anyone that might be interested in your project. Other conventions include the 4 space indentation, comments, and imports. Reading the "),b,s(" is highly recommended. ")]),_:1})]),_:1}),v])}}};typeof e=="function"&&e(x);export{W as date,x as default,N as description,V as meta,B as tags,A as title,j as updated};
