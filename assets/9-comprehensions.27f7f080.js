import{_ as k,a as h,b as d}from"./BaseDisclaimerTitle.631caf82.js";import{q as g,o as m,c as _,b as s,f as t,e as a,s as n,t as i,B as y,r as b}from"./app.e6b4b7b5.js";const f={class:"markdown-body"},w=a("p",null,"\u5217\u8868\u7406\u89E3\u662F\u4E00\u79CD\u7279\u6B8A\u7684\u8BED\u6CD5\uFF0C\u5B83\u8BA9\u6211\u4EEC\u4ECE\u5176\u4ED6\u5217\u8868\u4E2D\u521B\u5EFA\u5217\u8868\uFF0C\u5728\u5904\u7406\u6570\u5B57\u548C\u4E00\u4E24\u5C42\u5D4C\u5957for\u5FAA\u73AF\u65F6\u975E\u5E38\u6709\u7528\u3002",-1),C=a("a",{target:"_blank",href:"https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"},"tutorial",-1),q=i(`<h2 id="list-comprehension" tabindex="-1">List comprehension</h2><p>This is how we create a new list from an existing collection with a For Loop:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Charles&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Susan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Patrick&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;George&#39;</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> new_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> names<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> new_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> new_list
<span class="token comment"># [&#39;\u67E5\u5C14\u65AF&#39;, &#39;\u82CF\u73CA&#39;, &#39;\u5E15\u7279\u91CC\u514B&#39;, &#39;\u4E54\u6CBB&#39;]</span>
</code></pre><p>\u8FD9\u5C31\u662F\u6211\u4EEC\u5982\u4F55\u7528List Comprehension\u505A\u540C\u6837\u7684\u4E8B\u60C5\u3002</p><p>\`\`python</p><blockquote><blockquote><p>names = [\u2018Charles\u2019, \u2018Susan\u2019, \u2018Patrick\u2019, \u2018George\u2019] \u3002</p></blockquote></blockquote><blockquote><blockquote><p>new_list = [n for n in names] new_list</p></blockquote></blockquote><h1 id="" tabindex="-1">[\u2018\u67E5\u5C14\u65AF\u2019, \u2018\u82CF\u73CA\u2019, \u2018\u5E15\u7279\u91CC\u514B\u2019, \u2018\u4E54\u6CBB\u2019]</h1><pre><code>
\u6211\u4EEC\u53EF\u4EE5\u7528\u6570\u5B57\u505A\u540C\u6837\u7684\u4E8B\u60C5\u3002

\`\`python
&gt;&gt; n = [(a, b) for a in range(1, 3) for b in range(1, 3)]\u3002
&gt;&gt;&gt; n
# [(1, 1), (1, 2), (2, 1), (2, 2)]
</code></pre><h2 id="-1" tabindex="-1">\u6DFB\u52A0\u6761\u4EF6\u8BED\u53E5</h2><p>\u5982\u679C\u6211\u4EEC\u60F3\u8BA9<code>new_list</code>\u53EA\u6709\u4EE5C\u5F00\u5934\u7684\u540D\u5B57\uFF0C\u7528\u4E00\u4E2Afor\u5FAA\u73AF\uFF0C\u6211\u4EEC\u4F1A\u8FD9\u6837\u505A\u3002</p><p>\`\`python</p><blockquote><blockquote><p>names = [\u2018Charles\u2019, \u2018Susan\u2019, \u2018Patrick\u2019, \u2018George\u2019, \u2018Carol\u2019].</p></blockquote></blockquote><blockquote><blockquote><p>new_list = [] for n in names: \u2026 if n.startedwith(\u2018C\u2019): \u2026 new_list.append(n) \u2026 print(new_list)</p></blockquote></blockquote><h1 id="charles-carol" tabindex="-1">[\u2018Charles\u2019, \u2018Carol\u2019]</h1><pre><code>
In a List Comprehension, we add the \`if\` statement at the end:

\`\`\`python
&gt;&gt;&gt; new_list = [n for n in names if n.startswith(&#39;C&#39;)]
&gt;&gt;&gt; print(new_list)
# [&#39;Charles&#39;, &#39;Carol&#39;]
</code></pre>`,16),P=a("b",null,"sets",-1),v=a("b",null,"dictionaries",-1),L=i(`<h2 id="set-comprehension" tabindex="-1">Set comprehension</h2><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;def&quot;</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> b<span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;ABC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DEF&quot;</span><span class="token punctuation">}</span>
</code></pre><h2 id="dict-comprehension" tabindex="-1">Dict comprehension</h2><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Pooka&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>v<span class="token punctuation">:</span> k <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> c<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&#39;Pooka&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">}</span>
</code></pre><p>A List comprehension can be generated from a dictionary:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Pooka&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;first_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39; Oooka&#39;</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token string">&quot;{}:{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> c<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&#39;name:pooka&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;first_name:ouooka&#39;</span><span class="token punctuation">]</span>
</code></pre>`,6),D="Python Comprehensions - Python Cheatsheet",F="List comprehensions provide a concise way to create lists",G=[{property:"og:title",content:"Python Comprehensions - Python Cheatsheet"},{property:"og:description",content:"List comprehensions provide a concise way to create lists"},{name:"description",content:"List comprehensions provide a concise way to create lists"}],T={__name:"9-comprehensions",setup(x,{expose:l}){const o={title:"Python Comprehensions - Python Cheatsheet",description:"List comprehensions provide a concise way to create lists",meta:[{property:"og:title",content:"Python Comprehensions - Python Cheatsheet"},{property:"og:description",content:"List comprehensions provide a concise way to create lists"},{name:"description",content:"List comprehensions provide a concise way to create lists"}]};return l({frontmatter:o}),g({title:"Python Comprehensions - Python Cheatsheet",meta:[{property:"og:title",content:"Python Comprehensions - Python Cheatsheet"},{property:"og:description",content:"List comprehensions provide a concise way to create lists"},{name:"description",content:"List comprehensions provide a concise way to create lists"}]}),(B,N)=>{const r=y,e=h,p=d,c=k,u=b("router-link");return m(),_("div",f,[s(r,{title:o.title,description:o.description},{default:t(()=>[n("\u3002 Python\u7684\u7406\u89E3\u529B ")]),_:1},8,["title","description"]),w,s(c,null,{default:t(()=>[s(e,null,{default:t(()=>[n(" From the Python 3 "),C]),_:1}),s(p,null,{default:t(()=>[n(" List comprehensions provide a concise way to create lists. [...] or to create a subsequence of those elements that satisfy a certain condition. ")]),_:1})]),_:1}),a("p",null,[n("Read "),s(u,{to:"/blog/python-comprehensions-step-by-step"},{default:t(()=>[n("Python Comprehensions: A step by step Introduction")]),_:1}),n(" for a more in-deep or introduction.")]),q,s(c,null,{default:t(()=>[s(e,null,{default:t(()=>[n(" Set and Dict comprehensions ")]),_:1}),s(p,null,{default:t(()=>[n(" The basics of `list` comprehensions also apply to "),P,n(" and "),v,n(". ")]),_:1})]),_:1}),L])}}};export{T as default,F as description,G as meta,D as title};
