import{_ as l,a as r,b as u}from"./BaseDisclaimerTitle.631caf82.js";import{q as g,o as k,c as d,b as n,f as s,t as m,B as h,s as t,e as b}from"./app.e6b4b7b5.js";const y={class:"markdown-body"},f=b("a",{target:"_blank",href:"https://en.wikipedia.org/wiki/Debugging"},"Finding and resolving bugs",-1),w=m(`<h2 id="raising-exceptions" tabindex="-1">Raising Exceptions</h2><p>Exceptions are raised with a raise statement. In code, a raise statement consists of the following:</p><ul><li>The <code>raise</code> keyword</li><li>A call to the <code>Exception()</code> function</li><li>A string with a helpful error message passed to the <code>Exception()</code> function</li></ul><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;This is the error message.&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># Traceback (most recent call last):</span>
<span class="token comment">#   File &quot;&lt;pyshell#191&gt;&quot;, line 1, in &lt;module&gt;</span>
<span class="token comment">#     raise Exception(&#39;This is the error message.&#39;)</span>
<span class="token comment"># Exception: This is the error message.</span>
</code></pre><p>Typically, it\u2019s the code that calls the function, not the function itself, that knows how to handle an exception. So, you will commonly see a raise statement inside a function and the <code>try</code> and <code>except</code> statements in the code calling the function.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">box_print</span><span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;Symbol must be a single character string.&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> width <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;Width must be greater than 2.&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> height <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;Height must be greater than 2.&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>symbol <span class="token operator">*</span> width<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>symbol <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">&#39; &#39;</span> <span class="token operator">*</span> <span class="token punctuation">(</span>width <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> symbol<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>symbol <span class="token operator">*</span> width<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> sym<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;O&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;ZZ&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">try</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         box_print<span class="token punctuation">(</span>sym<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">except</span> Exception <span class="token keyword">as</span> err<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;An exception happened: &#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># ****</span>
<span class="token comment"># *  *</span>
<span class="token comment"># *  *</span>
<span class="token comment"># ****</span>
<span class="token comment"># OOOOOOOOOOOOOOOOOOOO</span>
<span class="token comment"># O                  O</span>
<span class="token comment"># O                  O</span>
<span class="token comment"># O                  O</span>
<span class="token comment"># OOOOOOOOOOOOOOOOOOOO</span>
<span class="token comment"># An exception happened: Width must be greater than 2.</span>
<span class="token comment"># An exception happened: Symbol must be a single character string.</span>
</code></pre><p>Read more about <a href="/cheatsheet/exception-handling">Exception Handling</a>.</p><h2 id="getting-the-traceback-as-a-string" tabindex="-1">Getting the Traceback as a string</h2><p>The <code>traceback</code> is displayed by Python whenever a raised exception goes unhandled. But can also obtain it as a string by calling traceback.format_exc(). This function is useful if you want the information from an exception\u2019s traceback but also want an except statement to gracefully handle the exception. You will need to import Python\u2019s traceback module before calling this function.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> traceback

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">try</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;This is the error message.&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">except</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;errorInfo.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> error_file<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         error_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;The traceback info was written to errorInfo.txt.&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment"># 116</span>
<span class="token comment"># The traceback info was written to errorInfo.txt.</span>
</code></pre><p>The 116 is the return value from the <code>write()</code> method, since 116 characters were written to the file. The <code>traceback</code> text was written to errorInfo.txt.</p><pre><code>Traceback (most recent call last):
  File &quot;&lt;pyshell#28&gt;&quot;, line 2, in &lt;module&gt;
Exception: This is the error message.
</code></pre><h2 id="assertions" tabindex="-1">Assertions</h2><p>An assertion is a sanity check to make sure your code isn\u2019t doing something obviously wrong. These sanity checks are performed by <code>assert</code> statements. If the sanity check fails, then an <code>AssertionError</code> exception is raised. In code, an <code>assert</code> statement consists of the following:</p><ul><li>The <code>assert</code> keyword</li><li>A condition (that is, an expression that evaluates to <code>True</code> or <code>False</code>)</li><li>A comma</li><li>A <code>string</code> to display when the condition is <code>False</code></li></ul><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pod_bay_door_status <span class="token operator">=</span> <span class="token string">&#39;open&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">assert</span> pod_bay_door_status <span class="token operator">==</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;The pod bay doors need to be &quot;open&quot;.&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pod_bay_door_status <span class="token operator">=</span> <span class="token string">&#39;I\\&#39;m sorry, Dave. I\\&#39;m afraid I can\\&#39;t do that.&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">assert</span> pod_bay_door_status <span class="token operator">==</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;The pod bay doors need to be &quot;open&quot;.&#39;</span>
<span class="token comment"># Traceback (most recent call last):</span>
<span class="token comment">#   File &quot;&lt;pyshell#10&gt;&quot;, line 1, in &lt;module&gt;</span>
<span class="token comment">#     assert pod_bay_door_status == &#39;open&#39;, &#39;The pod bay doors need to be &quot;open&quot;.&#39;</span>
<span class="token comment"># AssertionError: The pod bay doors need to be &quot;open&quot;.</span>
</code></pre><p>In plain English, an assert statement says, \u201CI assert that this condition holds true, and if not, there is a bug somewhere in the program.\u201D Unlike exceptions, your code should not handle assert statements with try and except; if an assert fails, your program should crash. By failing fast like this, you shorten the time between the original cause of the bug and when you first notice the bug. This will reduce the amount of code you will have to check before finding the code that\u2019s causing the bug.</p><h3 id="disabling-assertions" tabindex="-1">Disabling Assertions</h3><p>Assertions can be disabled by passing the <code>-O</code> option when running Python.</p><h2 id="logging" tabindex="-1">Logging</h2><p>To enable the <code>logging</code> module to display log messages on your screen as your program runs, copy the following to the top of your program:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> logging
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39; %(asctime)s - %(levelname)s- %(message)s&#39;</span><span class="token punctuation">)</span>
</code></pre><p>Say you wrote a function to calculate the factorial of a number. In mathematics, factorial 4 is 1 \xD7 2 \xD7 3 \xD7 4, or 24. Factorial 7 is 1 \xD7 2 \xD7 3 \xD7 4 \xD7 5 \xD7 6 \xD7 7, or 5,040. Open a new file editor window and enter the following code. It has a bug in it, but you will also enter several log messages to help yourself figure out what is going wrong. Save the program as factorialLog.py.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> logging
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39; %(asctime)s - %(levelname)s- %(message)s&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&#39;Start of program&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&#39;Start of factorial(%s)&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     total <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         total <span class="token operator">*=</span> i
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&#39;i is &#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;, total is &#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&#39;End of factorial(%s)&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> total
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>factorial<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&#39;End of program&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 2015-05-23 16:20:12,664 - DEBUG - Start of program</span>
<span class="token comment"># 2015-05-23 16:20:12,664 - DEBUG - Start of factorial(5)</span>
<span class="token comment"># 2015-05-23 16:20:12,665 - DEBUG - i is 0, total is 0</span>
<span class="token comment"># 2015-05-23 16:20:12,668 - DEBUG - i is 1, total is 0</span>
<span class="token comment"># 2015-05-23 16:20:12,670 - DEBUG - i is 2, total is 0</span>
<span class="token comment"># 2015-05-23 16:20:12,673 - DEBUG - i is 3, total is 0</span>
<span class="token comment"># 2015-05-23 16:20:12,675 - DEBUG - i is 4, total is 0</span>
<span class="token comment"># 2015-05-23 16:20:12,678 - DEBUG - i is 5, total is 0</span>
<span class="token comment"># 2015-05-23 16:20:12,680 - DEBUG - End of factorial(5)</span>
<span class="token comment"># 0</span>
<span class="token comment"># 2015-05-23 16:20:12,684 - DEBUG - End of program</span>
</code></pre><h2 id="logging-levels" tabindex="-1">Logging Levels</h2><p>Logging levels provide a way to categorize your log messages by importance. There are five logging levels, described in Table 10-1 from least to most important. Messages can be logged at each level using a different logging function.</p><table><thead><tr><th>Level</th><th>Logging Function</th><th>Description</th></tr></thead><tbody><tr><td><code>DEBUG</code></td><td><code>logging.debug()</code></td><td>The lowest level. Used for small details. Usually you care about these messages only when diagnosing problems.</td></tr><tr><td><code>INFO</code></td><td><code>logging.info()</code></td><td>Used to record information on general events in your program or confirm that things are working at their point in the program.</td></tr><tr><td><code>WARNING</code></td><td><code>logging.warning()</code></td><td>Used to indicate a potential problem that doesn\u2019t prevent the program from working but might do so in the future.</td></tr><tr><td><code>ERROR</code></td><td><code>logging.error()</code></td><td>Used to record an error that caused the program to fail to do something.</td></tr><tr><td><code>CRITICAL</code></td><td><code>logging.critical()</code></td><td>The highest level. Used to indicate a fatal error that has caused or is about to cause the program to stop running entirely.</td></tr></tbody></table><h2 id="disabling-logging" tabindex="-1">Disabling Logging</h2><p>After you\u2019ve debugged your program, you probably don\u2019t want all these log messages cluttering the screen. The logging.disable() function disables these so that you don\u2019t have to go into your program and remove all the logging calls by hand.</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> logging

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39; %(asctime)s -%(levelname)s - %(message)s&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">&#39;Critical error! Critical error!&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 2015-05-22 11:10:48,054 - CRITICAL - Critical error! Critical error!</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>disable<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>CRITICAL<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">&#39;Critical error! Critical error!&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&#39;Error! Error!&#39;</span><span class="token punctuation">)</span>
</code></pre><h2 id="logging-to-a-file" tabindex="-1">Logging to a File</h2><p>Instead of displaying the log messages to the screen, you can write them to a text file. The <code>logging.basicConfig()</code> function takes a filename keyword argument, like so:</p><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> logging
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">&#39;myProgramLog.txt&#39;</span><span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;%(asctime)s - %(levelname)s - %(message)s&#39;</span><span class="token punctuation">)</span>
</code></pre>`,33),I="Python Debugging - Python Cheatsheet",D="In computer programming and software development, debugging is the process of finding and resolving bugs (defects or problems that prevent correct operation) within computer programs, software, or systems.",C=[{property:"og:title",content:"Python Debugging - Python Cheatsheet"},{property:"og:description",content:"In computer programming and software development, debugging is the process of finding and resolving bugs (defects or problems that prevent correct operation) within computer programs, software, or systems."},{name:"description",content:"In computer programming and software development, debugging is the process of finding and resolving bugs (defects or problems that prevent correct operation) within computer programs, software, or systems."}],U={__name:"18-debugging",setup(_,{expose:o}){const a={title:"Python Debugging - Python Cheatsheet",description:"In computer programming and software development, debugging is the process of finding and resolving bugs (defects or problems that prevent correct operation) within computer programs, software, or systems.",meta:[{property:"og:title",content:"Python Debugging - Python Cheatsheet"},{property:"og:description",content:"In computer programming and software development, debugging is the process of finding and resolving bugs (defects or problems that prevent correct operation) within computer programs, software, or systems."},{name:"description",content:"In computer programming and software development, debugging is the process of finding and resolving bugs (defects or problems that prevent correct operation) within computer programs, software, or systems."}]};return o({frontmatter:a}),g({title:"Python Debugging - Python Cheatsheet",meta:[{property:"og:title",content:"Python Debugging - Python Cheatsheet"},{property:"og:description",content:"In computer programming and software development, debugging is the process of finding and resolving bugs (defects or problems that prevent correct operation) within computer programs, software, or systems."},{name:"description",content:"In computer programming and software development, debugging is the process of finding and resolving bugs (defects or problems that prevent correct operation) within computer programs, software, or systems."}]}),(x,O)=>{const e=h,p=r,c=u,i=l;return k(),d("div",y,[n(e,{title:a.title,description:a.description},{default:s(()=>[t(" Python Debugging ")]),_:1},8,["title","description"]),n(i,null,{default:s(()=>[n(p,null,{default:s(()=>[f]),_:1}),n(c,null,{default:s(()=>[t(" In computer programming and software development, debugging is the process of finding and resolving bugs (defects or problems that prevent correct operation) within computer programs, software, or systems. ")]),_:1})]),_:1}),w])}}};export{U as default,D as description,C as meta,I as title};
