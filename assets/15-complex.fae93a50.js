import{_ as u}from"./EmptySection.79a00cae.js";import{_ as p,a as l,b as d}from"./BaseDisclaimerTitle.631caf82.js";import{q as h,o as g,c as b,b as t,f as e,t as _,B as f,s as o,e as y}from"./app.e6b4b7b5.js";import"./BaseWarningTitle.f5a386c9.js";const x={class:"markdown-body"},k=y("a",{target:"_blank",href:"https://docs.python.org/3/library/functions.html#complex"},"Python 3 documentation",-1),v=_(`<h2 id="examples" tabindex="-1">Examples</h2><pre class="language-python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># (1+0j)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># (1+0j)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token comment"># (100+0j)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token string">&#39;100&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># (100+0j)</span>
</code></pre>`,2),B="Python complex() built-in function - Python Cheatsheet",N="Return a complex number with the value real + imag*1j or convert a string or number to a complex number. [...] Each argument may be any numeric type (including complex). If imag is omitted, it defaults to zero and the constructor serves as a numeric conversion like int and float. If both arguments are omitted, returns 0j.",V=[{property:"og:title",content:"Python complex() built-in function - Python Cheatsheet"},{property:"og:description",content:"Return a complex number with the value real + imag*1j or convert a string or number to a complex number. [...] Each argument may be any numeric type (including complex). If imag is omitted, it defaults to zero and the constructor serves as a numeric conversion like int and float. If both arguments are omitted, returns 0j."},{name:"description",content:"Return a complex number with the value real + imag*1j or convert a string or number to a complex number. [...] Each argument may be any numeric type (including complex). If imag is omitted, it defaults to zero and the constructor serves as a numeric conversion like int and float. If both arguments are omitted, returns 0j."}],q={__name:"15-complex",setup(j,{expose:a}){const n={title:"Python complex() built-in function - Python Cheatsheet",description:"Return a complex number with the value real + imag*1j or convert a string or number to a complex number. [...] Each argument may be any numeric type (including complex). If imag is omitted, it defaults to zero and the constructor serves as a numeric conversion like int and float. If both arguments are omitted, returns 0j.",meta:[{property:"og:title",content:"Python complex() built-in function - Python Cheatsheet"},{property:"og:description",content:"Return a complex number with the value real + imag*1j or convert a string or number to a complex number. [...] Each argument may be any numeric type (including complex). If imag is omitted, it defaults to zero and the constructor serves as a numeric conversion like int and float. If both arguments are omitted, returns 0j."},{name:"description",content:"Return a complex number with the value real + imag*1j or convert a string or number to a complex number. [...] Each argument may be any numeric type (including complex). If imag is omitted, it defaults to zero and the constructor serves as a numeric conversion like int and float. If both arguments are omitted, returns 0j."}]};return a({frontmatter:n}),h({title:"Python complex() built-in function - Python Cheatsheet",meta:[{property:"og:title",content:"Python complex() built-in function - Python Cheatsheet"},{property:"og:description",content:"Return a complex number with the value real + imag*1j or convert a string or number to a complex number. [...] Each argument may be any numeric type (including complex). If imag is omitted, it defaults to zero and the constructor serves as a numeric conversion like int and float. If both arguments are omitted, returns 0j."},{name:"description",content:"Return a complex number with the value real + imag*1j or convert a string or number to a complex number. [...] Each argument may be any numeric type (including complex). If imag is omitted, it defaults to zero and the constructor serves as a numeric conversion like int and float. If both arguments are omitted, returns 0j."}]}),(P,w)=>{const s=f,r=l,i=d,c=p,m=u;return g(),b("div",x,[t(s,{title:n.title,description:n.description},{default:e(()=>[o(" Python complex() built-in function ")]),_:1},8,["title","description"]),t(c,null,{default:e(()=>[t(r,null,{default:e(()=>[o(" From the "),k]),_:1}),t(i,null,{default:e(()=>[o(" Return a complex number with the value real + imag*1j or convert a string or number to a complex number. [...] Each argument may be any numeric type (including complex). If imag is omitted, it defaults to zero and the constructor serves as a numeric conversion like int and float. If both arguments are omitted, returns 0j. ")]),_:1})]),_:1}),v,t(m)])}}};export{q as default,N as description,V as meta,B as title};
